
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 29 22:34:55 CEST 2009
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 29 22:34:55 CEST 2009
  */
public class Syntactic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\047\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\004\000\002\036\003" +
    "\000\002\036\003\000\002\037\006\000\002\037\005\000" +
    "\002\037\005\000\002\037\004\000\002\017\005\000\002" +
    "\002\003\000\002\002\004\000\002\006\003\000\002\006" +
    "\005\000\002\041\003\000\002\041\005\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\020\003\000\002\020\005\000\002\020\006\000\002" +
    "\020\005\000\002\020\006\000\002\020\006\000\002\020" +
    "\005\000\002\010\003\000\002\010\005\000\002\045\003" +
    "\000\002\045\004\000\002\005\003\000\002\005\005\000" +
    "\002\042\003\000\002\042\005\000\002\042\006\000\002" +
    "\007\003\000\002\007\005\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\014\004\000\002\014\005\000\002\014\005\000" +
    "\002\014\006\000\002\035\003\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\050\007\000\002\050" +
    "\011\000\002\043\007\000\002\044\005\000\002\046\007" +
    "\000\002\011\002\000\002\011\005\000\002\040\006\000" +
    "\002\012\003\000\002\012\004\000\002\012\004\000\002" +
    "\021\003\000\002\021\005\000\002\022\003\000\002\022" +
    "\005\000\002\023\003\000\002\023\005\000\002\024\003" +
    "\000\002\024\005\000\002\025\003\000\002\025\005\000" +
    "\002\025\005\000\002\026\003\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\027" +
    "\003\000\002\027\005\000\002\027\005\000\002\030\003" +
    "\000\002\030\005\000\002\030\005\000\002\034\003\000" +
    "\002\034\006\000\002\031\003\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\032\003\000\002\032" +
    "\006\000\002\032\005\000\002\032\006\000\002\032\004" +
    "\000\002\032\004\000\002\033\005\000\002\033\003\000" +
    "\002\033\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\003\000\002\003\003\000\002\003" +
    "\005\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\020\003\014\006\010\037\017\047\013\051" +
    "\004\053\021\055\020\001\002\000\012\037\uffed\040\uffed" +
    "\046\uffed\047\uffed\001\002\000\004\002\301\001\002\000" +
    "\006\037\017\047\013\001\002\000\022\002\ufffb\003\ufffb" +
    "\006\ufffb\037\ufffb\047\ufffb\051\ufffb\053\ufffb\055\ufffb\001" +
    "\002\000\012\037\uffef\040\uffef\046\uffef\047\uffef\001\002" +
    "\000\004\002\000\001\002\000\022\002\ufffc\003\ufffc\006" +
    "\ufffc\037\ufffc\047\ufffc\051\ufffc\053\ufffc\055\ufffc\001\002" +
    "\000\030\006\uffeb\022\uffeb\037\uffeb\040\uffeb\041\uffeb\043" +
    "\uffeb\045\uffeb\046\uffeb\051\uffeb\053\uffeb\055\uffeb\001\002" +
    "\000\020\003\014\006\010\037\017\047\013\051\004\053" +
    "\021\055\020\001\002\000\022\002\uffff\003\014\006\010" +
    "\037\017\047\013\051\004\053\021\055\020\001\002\000" +
    "\020\006\010\037\025\041\162\043\024\051\004\053\021" +
    "\055\020\001\002\000\006\037\017\047\013\001\002\000" +
    "\012\037\uffee\040\uffee\046\uffee\047\uffee\001\002\000\012" +
    "\037\uffec\040\uffec\046\uffec\047\uffec\001\002\000\010\037" +
    "\025\040\023\043\024\001\002\000\030\006\uffea\022\uffea" +
    "\037\uffea\040\uffea\041\uffea\043\uffea\045\uffea\046\uffea\051" +
    "\uffea\053\uffea\055\uffea\001\002\000\024\014\053\031\065" +
    "\034\054\037\055\044\044\047\056\050\067\052\052\054" +
    "\051\001\002\000\016\006\010\040\033\047\031\051\004" +
    "\053\021\055\020\001\002\000\006\040\uffe4\046\041\001" +
    "\002\000\012\037\017\040\uffe2\046\uffe2\047\013\001\002" +
    "\000\004\040\037\001\002\000\006\040\uffe0\046\035\001" +
    "\002\000\004\040\034\001\002\000\030\006\uffe5\022\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\043\uffe5\045\uffe5\046\uffe5\051" +
    "\uffe5\053\uffe5\055\uffe5\001\002\000\030\006\uffe7\022\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\043\uffe7\045\uffe7\046\uffe7\051" +
    "\uffe7\053\uffe7\055\uffe7\001\002\000\004\047\031\001\002" +
    "\000\004\040\uffdf\001\002\000\030\006\uffe6\022\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\043\uffe6\045\uffe6\046\uffe6\051\uffe6" +
    "\053\uffe6\055\uffe6\001\002\000\012\037\025\040\uffe1\043" +
    "\024\046\uffe1\001\002\000\012\006\010\051\004\053\021" +
    "\055\020\001\002\000\004\040\uffe3\001\002\000\044\013" +
    "\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\023\uffae" +
    "\024\uffae\026\uffae\030\uffae\033\uffae\036\uffae\040\uffae\042" +
    "\uffae\044\uffae\045\uffae\046\uffae\001\002\000\030\006\uffe8" +
    "\022\uffe8\037\uffe8\040\uffe8\041\uffe8\043\uffe8\045\uffe8\046" +
    "\uffe8\051\uffe8\053\uffe8\055\uffe8\001\002\000\066\013\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\001\002" +
    "\000\066\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\151\032\uffa9\033\uffa9\034\146\035\uffa9\036" +
    "\uffa9\037\150\040\uffa9\042\uffa9\043\147\044\uffa9\045\uffa9" +
    "\046\uffa9\001\002\000\066\013\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\001\002\000\004\044\145\001" +
    "\002\000\066\013\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\042\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\001\002\000\066\013\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\001\002\000\022\014\053" +
    "\031\065\034\054\037\055\047\056\050\067\052\052\054" +
    "\051\001\002\000\022\014\053\031\065\034\054\037\121" +
    "\047\056\050\067\052\052\054\051\001\002\000\032\006" +
    "\010\014\053\031\065\034\054\037\055\047\056\050\067" +
    "\051\004\052\052\053\021\054\051\055\020\001\002\000" +
    "\066\013\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\001\002\000\056\013\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\032\uffab\033\uffab\035\uffab\036\uffab" +
    "\040\uffab\042\uffab\044\uffab\045\uffab\046\uffab\001\002\000" +
    "\044\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\023\uffb1\024\uffb1\026\107\030\110\033\uffb1\036\uffb1\040" +
    "\uffb1\042\uffb1\044\uffb1\045\uffb1\046\uffb1\001\002\000\040" +
    "\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023" +
    "\uffb6\024\uffb6\033\104\036\105\040\uffb6\042\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\001\002\000\034\013\uffb9\015\102\016" +
    "\077\017\101\020\100\021\uffb9\023\uffb9\024\uffb9\040\uffb9" +
    "\042\uffb9\044\uffb9\045\uffb9\046\uffb9\001\002\000\024\013" +
    "\074\021\075\023\uffbb\024\uffbb\040\uffbb\042\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\001\002\000\020\023\072\024\uffbd\040" +
    "\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd\001\002\000\022" +
    "\014\053\031\065\034\054\037\121\047\056\050\067\052" +
    "\052\054\051\001\002\000\006\024\070\044\uff99\001\002" +
    "\000\066\013\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\037\uff9a\040\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\001\002\000\022\014\053\031\065\034\054\037" +
    "\055\047\056\050\067\052\052\054\051\001\002\000\020" +
    "\023\072\024\uffbc\040\uffbc\042\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\001\002\000\022\014\053\031\065\034\054\037\055" +
    "\047\056\050\067\052\052\054\051\001\002\000\024\013" +
    "\074\021\075\023\uffba\024\uffba\040\uffba\042\uffba\044\uffba" +
    "\045\uffba\046\uffba\001\002\000\022\014\053\031\065\034" +
    "\054\037\055\047\056\050\067\052\052\054\051\001\002" +
    "\000\022\014\053\031\065\034\054\037\055\047\056\050" +
    "\067\052\052\054\051\001\002\000\034\013\uffb8\015\102" +
    "\016\077\017\101\020\100\021\uffb8\023\uffb8\024\uffb8\040" +
    "\uffb8\042\uffb8\044\uffb8\045\uffb8\046\uffb8\001\002\000\022" +
    "\014\053\031\065\034\054\037\055\047\056\050\067\052" +
    "\052\054\051\001\002\000\022\014\053\031\065\034\054" +
    "\037\055\047\056\050\067\052\052\054\051\001\002\000" +
    "\022\014\053\031\065\034\054\037\055\047\056\050\067" +
    "\052\052\054\051\001\002\000\022\014\053\031\065\034" +
    "\054\037\055\047\056\050\067\052\052\054\051\001\002" +
    "\000\040\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\023\uffb3\024\uffb3\033\104\036\105\040\uffb3\042\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\001\002\000\022\014\053\031" +
    "\065\034\054\037\055\047\056\050\067\052\052\054\051" +
    "\001\002\000\022\014\053\031\065\034\054\037\055\047" +
    "\056\050\067\052\052\054\051\001\002\000\044\013\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf\024" +
    "\uffaf\026\107\030\110\033\uffaf\036\uffaf\040\uffaf\042\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\001\002\000\022\014\053\031" +
    "\065\034\054\037\055\047\056\050\067\052\052\054\051" +
    "\001\002\000\022\014\053\031\065\034\054\037\055\047" +
    "\056\050\067\052\052\054\051\001\002\000\044\013\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\023\uffac\024" +
    "\uffac\026\uffac\030\uffac\033\uffac\036\uffac\040\uffac\042\uffac" +
    "\044\uffac\045\uffac\046\uffac\001\002\000\044\013\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\023\uffad\024\uffad" +
    "\026\uffad\030\uffad\033\uffad\036\uffad\040\uffad\042\uffad\044" +
    "\uffad\045\uffad\046\uffad\001\002\000\044\013\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\026" +
    "\107\030\110\033\uffb0\036\uffb0\040\uffb0\042\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\001\002\000\040\013\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\023\uffb2\024\uffb2\033\104" +
    "\036\105\040\uffb2\042\uffb2\044\uffb2\045\uffb2\046\uffb2\001" +
    "\002\000\040\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\023\uffb4\024\uffb4\033\104\036\105\040\uffb4\042" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\001\002\000\040\013\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5\024" +
    "\uffb5\033\104\036\105\040\uffb5\042\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\001\002\000\034\013\uffb7\015\102\016\077\017" +
    "\101\020\100\021\uffb7\023\uffb7\024\uffb7\040\uffb7\042\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\001\002\000\056\013\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\032\uffa8\033" +
    "\uffa8\035\uffa8\036\uffa8\040\uffa8\042\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\001\002\000\022\014\053\031\065\034\054\037" +
    "\055\047\056\050\067\052\052\054\051\001\002\000\056" +
    "\013\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\133\023\uffab\024\uffab\025\135\026\uffab\027\131\030\uffab" +
    "\032\132\033\uffab\035\136\036\uffab\040\uffab\042\uffab\044" +
    "\uffab\045\uffab\046\uffab\001\002\000\006\040\127\046\126" +
    "\001\002\000\016\024\070\040\uffbf\042\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\001\002\000\012\040\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\001\002\000\022\014\053\031\065\034\054\037" +
    "\055\047\056\050\067\052\052\054\051\001\002\000\066" +
    "\013\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\001\002\000\012\040\uffc0\044\uffc0\045\uffc0\046\uffc0\001" +
    "\002\000\022\014\uff94\031\uff94\034\uff94\037\uff94\047\uff94" +
    "\050\uff94\052\uff94\054\uff94\001\002\000\022\014\uff93\031" +
    "\uff93\034\uff93\037\uff93\047\uff93\050\uff93\052\uff93\054\uff93" +
    "\001\002\000\022\014\uff96\031\uff96\034\uff96\037\uff96\047" +
    "\uff96\050\uff96\052\uff96\054\uff96\001\002\000\022\014\053" +
    "\031\065\034\054\037\055\047\056\050\067\052\052\054" +
    "\051\001\002\000\022\014\uff95\031\uff95\034\uff95\037\uff95" +
    "\047\uff95\050\uff95\052\uff95\054\uff95\001\002\000\022\014" +
    "\uff92\031\uff92\034\uff92\037\uff92\047\uff92\050\uff92\052\uff92" +
    "\054\uff92\001\002\000\014\040\uffbe\042\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\001\002\000\004\040\141\001\002\000\022" +
    "\014\053\031\065\034\054\037\055\047\056\050\067\052" +
    "\052\054\051\001\002\000\056\013\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\032\uffaa\033\uffaa\035\uffaa" +
    "\036\uffaa\040\uffaa\042\uffaa\044\uffaa\045\uffaa\046\uffaa\001" +
    "\002\000\056\013\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\032\uffa7\033\uffa7\035\uffa7\036\uffa7\040\uffa7" +
    "\042\uffa7\044\uffa7\045\uffa7\046\uffa7\001\002\000\056\013" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\032" +
    "\uffa6\033\uffa6\035\uffa6\036\uffa6\040\uffa6\042\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\001\002\000\030\006\uffe9\022\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\043\uffe9\045\uffe9\046\uffe9\051\uffe9" +
    "\053\uffe9\055\uffe9\001\002\000\066\013\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\001\002\000\022\014" +
    "\053\031\065\034\054\037\055\047\056\050\067\052\052" +
    "\054\051\001\002\000\024\014\053\031\065\034\054\037" +
    "\055\040\152\047\056\050\067\052\052\054\051\001\002" +
    "\000\066\013\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\001\002\000\066\013\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\001\002\000\006\040\uff98\046" +
    "\156\001\002\000\004\040\155\001\002\000\066\013\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\001\002" +
    "\000\022\014\053\031\065\034\054\037\055\047\056\050" +
    "\067\052\052\054\051\001\002\000\004\040\uff97\001\002" +
    "\000\006\044\161\046\126\001\002\000\066\013\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\001\002\000" +
    "\054\003\222\004\225\005\232\006\010\007\217\011\230" +
    "\012\220\014\053\031\065\034\054\037\055\041\162\042" +
    "\231\045\215\047\056\050\067\051\004\052\052\053\021" +
    "\054\051\055\020\001\002\000\006\037\017\047\013\001" +
    "\002\000\054\003\ufff5\004\ufff5\005\ufff5\006\010\007\ufff5" +
    "\011\ufff5\012\ufff5\014\ufff5\031\ufff5\034\ufff5\037\ufff5\041" +
    "\ufff5\042\ufff5\045\ufff5\047\ufff5\050\ufff5\051\004\052\ufff5" +
    "\053\021\054\ufff5\055\020\001\002\000\004\041\162\001" +
    "\002\000\022\002\ufff7\003\ufff7\006\ufff7\037\ufff7\047\ufff7" +
    "\051\ufff7\053\ufff7\055\ufff7\001\002\000\022\002\ufff8\003" +
    "\ufff8\006\ufff8\037\ufff8\047\ufff8\051\ufff8\053\ufff8\055\ufff8" +
    "\001\002\000\044\003\ufff4\004\ufff4\005\ufff4\007\ufff4\011" +
    "\ufff4\012\ufff4\014\ufff4\031\ufff4\034\ufff4\037\ufff4\041\ufff4" +
    "\042\ufff4\045\ufff4\047\ufff4\050\ufff4\052\ufff4\054\ufff4\001" +
    "\002\000\004\045\210\001\002\000\014\022\176\037\025" +
    "\043\024\045\ufff1\046\ufff1\001\002\000\006\045\ufff3\046" +
    "\174\001\002\000\006\037\017\047\013\001\002\000\004" +
    "\045\ufff2\001\002\000\024\014\053\031\065\034\054\037" +
    "\055\041\177\047\056\050\067\052\052\054\051\001\002" +
    "\000\024\014\053\031\065\034\054\037\055\041\177\047" +
    "\056\050\067\052\052\054\051\001\002\000\006\045\ufff0" +
    "\046\ufff0\001\002\000\010\042\uffde\045\uffde\046\uffde\001" +
    "\002\000\006\042\uffdb\046\uffdb\001\002\000\006\042\205" +
    "\046\204\001\002\000\026\014\053\031\065\034\054\037" +
    "\055\041\177\042\206\047\056\050\067\052\052\054\051" +
    "\001\002\000\010\042\uffdd\045\uffdd\046\uffdd\001\002\000" +
    "\010\042\uffdc\045\uffdc\046\uffdc\001\002\000\006\042\uffda" +
    "\046\uffda\001\002\000\056\002\ufff6\003\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6\014\ufff6\031\ufff6" +
    "\034\ufff6\037\ufff6\041\ufff6\042\ufff6\045\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\001\002" +
    "\000\004\042\272\001\002\000\046\003\uffd5\004\uffd5\005" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\014\uffd5\031\uffd5" +
    "\034\uffd5\037\uffd5\041\uffd5\042\uffd5\045\uffd5\047\uffd5\050" +
    "\uffd5\052\uffd5\054\uffd5\001\002\000\004\045\271\001\002" +
    "\000\046\003\uffd8\004\uffd8\005\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\014\uffd8\031\uffd8\034\uffd8\037\uffd8\041\uffd8" +
    "\042\uffd8\045\uffd8\047\uffd8\050\uffd8\052\uffd8\054\uffd8\001" +
    "\002\000\046\003\uffd0\004\uffd0\005\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\014\uffd0\031\uffd0\034\uffd0\037\uffd0\041" +
    "\uffd0\042\uffd0\045\uffd0\047\uffd0\050\uffd0\052\uffd0\054\uffd0" +
    "\001\002\000\044\003\222\004\225\005\232\007\217\011" +
    "\230\012\220\014\053\031\065\034\054\037\055\041\162" +
    "\042\uffc4\045\215\047\056\050\067\052\052\054\051\001" +
    "\002\000\004\037\262\001\002\000\022\014\053\031\065" +
    "\034\054\037\055\047\056\050\067\052\052\054\051\001" +
    "\002\000\046\003\uffd9\004\uffd9\005\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\014\uffd9\031\uffd9\034\uffd9\037\uffd9\041" +
    "\uffd9\042\uffd9\045\uffd9\047\uffd9\050\uffd9\052\uffd9\054\uffd9" +
    "\001\002\000\042\003\222\004\225\005\232\007\217\011" +
    "\230\012\220\014\053\031\065\034\054\037\055\041\162" +
    "\045\215\047\056\050\067\052\052\054\051\001\002\000" +
    "\004\045\256\001\002\000\046\003\uffd6\004\uffd6\005\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\014\uffd6\031\uffd6\034" +
    "\uffd6\037\uffd6\041\uffd6\042\uffd6\045\uffd6\047\uffd6\050\uffd6" +
    "\052\uffd6\054\uffd6\001\002\000\004\037\247\001\002\000" +
    "\006\045\246\046\126\001\002\000\046\003\uffd7\004\uffd7" +
    "\005\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\014\uffd7\031" +
    "\uffd7\034\uffd7\037\uffd7\041\uffd7\042\uffd7\045\uffd7\047\uffd7" +
    "\050\uffd7\052\uffd7\054\uffd7\001\002\000\004\037\242\001" +
    "\002\000\060\002\uffd4\003\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\014\uffd4\031\uffd4\034" +
    "\uffd4\037\uffd4\041\uffd4\042\uffd4\045\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\001\002\000" +
    "\004\037\237\001\002\000\044\003\222\004\225\005\232" +
    "\007\217\011\230\012\220\014\053\031\065\034\054\037" +
    "\055\041\162\042\235\045\215\047\056\050\067\052\052" +
    "\054\051\001\002\000\004\042\236\001\002\000\060\002" +
    "\uffd2\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\014\uffd2\031\uffd2\034\uffd2\037\uffd2\041" +
    "\uffd2\042\uffd2\045\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\055\uffd2\001\002\000\060\002\uffd1\003" +
    "\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\014\uffd1\031\uffd1\034\uffd1\037\uffd1\041\uffd1\042" +
    "\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\001\002\000\004\047\240\001\002\000" +
    "\004\040\241\001\002\000\004\045\uffc5\001\002\000\022" +
    "\014\053\031\065\034\054\037\055\047\056\050\067\052" +
    "\052\054\051\001\002\000\006\040\244\046\126\001\002" +
    "\000\040\004\225\005\232\007\217\011\230\012\220\014" +
    "\053\031\065\034\054\037\055\041\162\045\215\047\056" +
    "\050\067\052\052\054\051\001\002\000\046\003\uffca\004" +
    "\uffca\005\uffca\007\uffca\010\uffca\011\uffca\012\uffca\014\uffca" +
    "\031\uffca\034\uffca\037\uffca\041\uffca\042\uffca\045\uffca\047" +
    "\uffca\050\uffca\052\uffca\054\uffca\001\002\000\046\003\uffcf" +
    "\004\uffcf\005\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\014" +
    "\uffcf\031\uffcf\034\uffcf\037\uffcf\041\uffcf\042\uffcf\045\uffcf" +
    "\047\uffcf\050\uffcf\052\uffcf\054\uffcf\001\002\000\004\056" +
    "\250\001\002\000\006\040\uffc7\046\251\001\002\000\004" +
    "\047\254\001\002\000\004\040\253\001\002\000\004\045" +
    "\uffc8\001\002\000\006\040\uffc7\046\251\001\002\000\004" +
    "\040\uffc6\001\002\000\046\003\uffce\004\uffce\005\uffce\007" +
    "\uffce\010\uffce\011\uffce\012\uffce\014\uffce\031\uffce\034\uffce" +
    "\037\uffce\041\uffce\042\uffce\045\uffce\047\uffce\050\uffce\052" +
    "\uffce\054\uffce\001\002\000\004\042\uffc2\001\002\000\006" +
    "\045\261\046\126\001\002\000\046\003\uffc9\004\uffc9\005" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\031\uffc9" +
    "\034\uffc9\037\uffc9\041\uffc9\042\uffc9\045\uffc9\047\uffc9\050" +
    "\uffc9\052\uffc9\054\uffc9\001\002\000\022\014\053\031\065" +
    "\034\054\037\055\047\056\050\067\052\052\054\051\001" +
    "\002\000\006\040\264\046\126\001\002\000\040\004\225" +
    "\005\232\007\217\011\230\012\220\014\053\031\065\034" +
    "\054\037\055\041\162\045\215\047\056\050\067\052\052" +
    "\054\051\001\002\000\046\003\uffcc\004\uffcc\005\uffcc\007" +
    "\uffcc\010\266\011\uffcc\012\uffcc\014\uffcc\031\uffcc\034\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\045\uffcc\047\uffcc\050\uffcc\052" +
    "\uffcc\054\uffcc\001\002\000\040\004\225\005\232\007\217" +
    "\011\230\012\220\014\053\031\065\034\054\037\055\041" +
    "\162\045\215\047\056\050\067\052\052\054\051\001\002" +
    "\000\046\003\uffcb\004\uffcb\005\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\014\uffcb\031\uffcb\034\uffcb\037\uffcb\041\uffcb" +
    "\042\uffcb\045\uffcb\047\uffcb\050\uffcb\052\uffcb\054\uffcb\001" +
    "\002\000\004\042\uffc3\001\002\000\046\003\uffcd\004\uffcd" +
    "\005\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\014\uffcd\031" +
    "\uffcd\034\uffcd\037\uffcd\041\uffcd\042\uffcd\045\uffcd\047\uffcd" +
    "\050\uffcd\052\uffcd\054\uffcd\001\002\000\060\002\uffd3\003" +
    "\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\014\uffd3\031\uffd3\034\uffd3\037\uffd3\041\uffd3\042" +
    "\uffd3\045\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\ufffd\001\002\000\026\006\010\022\176\037\025" +
    "\041\162\043\024\045\ufff1\046\ufff1\051\004\053\021\055" +
    "\020\001\002\000\004\041\162\001\002\000\022\002\ufff9" +
    "\003\ufff9\006\ufff9\037\ufff9\047\ufff9\051\ufff9\053\ufff9\055" +
    "\ufff9\001\002\000\022\002\ufffa\003\ufffa\006\ufffa\037\ufffa" +
    "\047\ufffa\051\ufffa\053\ufffa\055\ufffa\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\020\004\010\017\006\020\015\036\014\037" +
    "\011\047\004\052\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\170\020\274\041\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\273\017\006\020" +
    "\015\036\014\037\011\052\005\001\001\000\016\004\272" +
    "\017\006\020\015\036\014\037\011\052\005\001\001\000" +
    "\012\002\164\014\165\017\163\052\162\001\001\000\004" +
    "\020\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\015\046\016\047" +
    "\023\065\024\063\025\062\026\061\027\060\030\057\031" +
    "\056\032\045\033\044\034\042\001\001\000\012\005\027" +
    "\010\031\045\025\052\026\001\001\000\002\001\001\000" +
    "\004\020\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\041\045\025\052\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\046\031\056\032\045\033\044\034\143\001\001\000" +
    "\012\015\046\031\142\032\045\033\044\001\001\000\036" +
    "\015\046\021\122\022\124\023\123\024\063\025\062\026" +
    "\061\027\060\030\057\031\121\032\045\033\044\034\042" +
    "\052\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\046\031\117\032" +
    "\045\033\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\015\046\024\070\025\062\026\061\027\060\030" +
    "\057\031\056\032\045\033\044\034\042\001\001\000\002" +
    "\001\001\000\024\015\046\025\072\026\061\027\060\030" +
    "\057\031\056\032\045\033\044\034\042\001\001\000\002" +
    "\001\001\000\022\015\046\026\116\027\060\030\057\031" +
    "\056\032\045\033\044\034\042\001\001\000\022\015\046" +
    "\026\075\027\060\030\057\031\056\032\045\033\044\034" +
    "\042\001\001\000\002\001\001\000\020\015\046\027\115" +
    "\030\057\031\056\032\045\033\044\034\042\001\001\000" +
    "\020\015\046\027\114\030\057\031\056\032\045\033\044" +
    "\034\042\001\001\000\020\015\046\027\113\030\057\031" +
    "\056\032\045\033\044\034\042\001\001\000\020\015\046" +
    "\027\102\030\057\031\056\032\045\033\044\034\042\001" +
    "\001\000\002\001\001\000\016\015\046\030\112\031\056" +
    "\032\045\033\044\034\042\001\001\000\016\015\046\030" +
    "\105\031\056\032\045\033\044\034\042\001\001\000\002" +
    "\001\001\000\014\015\046\031\056\032\045\033\044\034" +
    "\111\001\001\000\014\015\046\031\056\032\045\033\044" +
    "\034\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\015" +
    "\046\021\122\022\124\023\123\024\063\025\062\026\061" +
    "\027\060\030\057\031\121\032\045\033\044\034\042\001" +
    "\001\000\004\013\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\015\046\022\127\023" +
    "\123\024\063\025\062\026\061\027\060\030\057\031\121" +
    "\032\045\033\044\034\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\015\046\022\136\023\123\024\063\025" +
    "\062\026\061\027\060\030\057\031\121\032\045\033\044" +
    "\034\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\046\031\056" +
    "\032\045\033\044\034\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\015\046\021\157\022\124\023\123\024" +
    "\063\025\062\026\061\027\060\030\057\031\121\032\045" +
    "\033\044\034\042\001\001\000\034\003\153\015\046\022" +
    "\152\023\123\024\063\025\062\026\061\027\060\030\057" +
    "\031\121\032\045\033\044\034\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\156\015\046\022\152\023" +
    "\123\024\063\025\062\026\061\027\060\030\057\031\121" +
    "\032\045\033\044\034\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\002\232\012\210" +
    "\014\220\015\046\017\163\021\225\022\124\023\123\024" +
    "\063\025\062\026\061\027\060\030\057\031\121\032\045" +
    "\033\044\034\042\035\213\040\212\043\223\044\211\046" +
    "\222\050\226\051\215\052\162\001\001\000\010\006\170" +
    "\020\171\041\172\001\001\000\010\002\167\017\163\052" +
    "\162\001\001\000\004\014\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\174\020\171" +
    "\041\172\001\001\000\002\001\001\000\034\015\046\022" +
    "\200\023\123\024\063\025\062\026\061\027\060\030\057" +
    "\031\121\032\045\033\044\034\042\042\177\001\001\000" +
    "\036\007\202\015\046\022\200\023\123\024\063\025\062" +
    "\026\061\027\060\030\057\031\121\032\045\033\044\034" +
    "\042\042\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\015\046\022" +
    "\200\023\123\024\063\025\062\026\061\027\060\030\057" +
    "\031\121\032\045\033\044\034\042\042\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\012\267" +
    "\014\220\015\046\021\225\022\124\023\123\024\063\025" +
    "\062\026\061\027\060\030\057\031\121\032\045\033\044" +
    "\034\042\035\213\040\212\043\223\044\211\046\222\050" +
    "\226\051\215\001\001\000\002\001\001\000\034\015\046" +
    "\021\257\022\124\023\123\024\063\025\062\026\061\027" +
    "\060\030\057\031\121\032\045\033\044\034\042\001\001" +
    "\000\002\001\001\000\056\012\256\014\220\015\046\021" +
    "\225\022\124\023\123\024\063\025\062\026\061\027\060" +
    "\030\057\031\121\032\045\033\044\034\042\035\213\040" +
    "\212\043\223\044\211\046\222\050\226\051\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\012\233\014\220\015" +
    "\046\021\225\022\124\023\123\024\063\025\062\026\061" +
    "\027\060\030\057\031\121\032\045\033\044\034\042\035" +
    "\213\040\212\043\223\044\211\046\222\050\226\051\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\015\046\021\242\022\124\023\123\024\063\025" +
    "\062\026\061\027\060\030\057\031\121\032\045\033\044" +
    "\034\042\001\001\000\002\001\001\000\054\014\220\015" +
    "\046\021\225\022\124\023\123\024\063\025\062\026\061" +
    "\027\060\030\057\031\121\032\045\033\044\034\042\035" +
    "\213\040\212\043\223\044\211\046\222\050\226\051\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\015\046\021\262\022" +
    "\124\023\123\024\063\025\062\026\061\027\060\030\057" +
    "\031\121\032\045\033\044\034\042\001\001\000\002\001" +
    "\001\000\054\014\220\015\046\021\225\022\124\023\123" +
    "\024\063\025\062\026\061\027\060\030\057\031\121\032" +
    "\045\033\044\034\042\035\213\040\212\043\223\044\211" +
    "\046\222\050\226\051\264\001\001\000\002\001\001\000" +
    "\054\014\220\015\046\021\225\022\124\023\123\024\063" +
    "\025\062\026\061\027\060\030\057\031\121\032\045\033" +
    "\044\034\042\035\213\040\212\043\223\044\211\046\222" +
    "\050\226\051\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\275\014\276\017\163\052" +
    "\162\001\001\000\004\014\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static void main(String args[]) throws Exception{
		Syntactic sin;
		Lexer lex;
		System.out.println("Con argumentos " + args[0]);
		lex = new Lexer(new java.io.FileReader(args[0]));
		sin = new Syntactic(lex);
		sin.parse();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // AssignmentOp ::= MINUSEQ 
            {
              Object RESULT =null;
		
	System.out.println("AssignmentOp");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("AssignmentOp",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // AssignmentOp ::= PLUSEQ 
            {
              Object RESULT =null;
		
	System.out.println("AssignmentOp");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("AssignmentOp",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // AssignmentOp ::= DIVEQ 
            {
              Object RESULT =null;
		
	System.out.println("AssignmentOp");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("AssignmentOp",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // AssignmentOp ::= MULTEQ 
            {
              Object RESULT =null;
		
	System.out.println("AssignmentOp");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("AssignmentOp",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // AssignmentOp ::= EQ 
            {
              Object RESULT =null;
		
	System.out.println("AssignmentOp");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("AssignmentOp",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // _Exp2_ ::= Exp2 COMMA _Exp2_ 
            {
              Object RESULT =null;
		
	System.out.println("_Exp2_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Exp2_",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // _Exp2_ ::= Exp2 
            {
              Object RESULT =null;
		
	System.out.println("_Exp2_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Exp2_",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ConstantExpression ::= Exp3 
            {
              Object RESULT =null;
		
	System.out.println("ConstantExpression");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ConstantExpression",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Constant ::= INTEGER 
            {
              Object RESULT =null;
		
	System.out.println("Constant");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Constant",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Constant ::= CHARACTER 
            {
              Object RESULT =null;
		
	System.out.println("Constant");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Constant",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Constant ::= NUMBERF 
            {
              Object RESULT =null;
		
	System.out.println("Constant");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Constant",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Exp11 ::= Constant 
            {
              Object RESULT =null;
		
	System.out.println("Exp11");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp11",25, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Exp11 ::= ID 
            {
              Object RESULT =null;
		
	System.out.println("Exp11");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp11",25, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Exp11 ::= LPAREN Exp RPAREN 
            {
              Object RESULT =null;
		
	System.out.println("Exp11");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp11",25, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exp10 ::= Exp10 MINUSMINUS 
            {
              Object RESULT =null;
		
	System.out.println("Exp10");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp10 ::= Exp10 PLUSPLUS 
            {
              Object RESULT =null;
		
	System.out.println("Exp10");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp10 ::= Exp10 LPAREN _Exp2_ RPAREN 
            {
              Object RESULT =null;
		
	System.out.println("Exp10");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp10 ::= Exp10 LPAREN RPAREN 
            {
              Object RESULT =null;
		
	System.out.println("Exp10");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp10 ::= Exp10 LBRACK Exp RBRACK 
            {
              Object RESULT =null;
		
	System.out.println("Exp10");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp10 ::= Exp11 
            {
              Object RESULT =null;
		
	System.out.println("Exp10");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp9 ::= NOT Exp12 
            {
              Object RESULT =null;
		
	System.out.println("Exp9");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp9",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp9 ::= MINUSMINUS Exp9 
            {
              Object RESULT =null;
		
	System.out.println("Exp9");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp9",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp9 ::= PLUSPLUS Exp9 
            {
              Object RESULT =null;
		
	System.out.println("Exp9");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp9",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp9 ::= Exp10 
            {
              Object RESULT =null;
		
	System.out.println("Exp9");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp9",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp12 ::= LPAREN TypeSpecifier RPAREN Exp12 
            {
              Object RESULT =null;
		
	System.out.println("Exp12");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp12",26, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp12 ::= Exp9 
            {
              Object RESULT =null;
		
	System.out.println("Exp12");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp12",26, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp8 ::= Exp8 DIV Exp12 
            {
              Object RESULT =null;
		
	System.out.println("Exp8");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp8",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp8 ::= Exp8 MULT Exp12 
            {
              Object RESULT =null;
		
	System.out.println("Exp8");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp8",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp8 ::= Exp12 
            {
              Object RESULT =null;
		
	System.out.println("Exp8");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp8",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp7 ::= Exp7 MINUS Exp8 
            {
              Object RESULT =null;
		
	System.out.println("Exp7");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp7",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp7 ::= Exp7 PLUS Exp8 
            {
              Object RESULT =null;
		
	System.out.println("Exp7");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp7",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp7 ::= Exp8 
            {
              Object RESULT =null;
		
	System.out.println("Exp7");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp7",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp6 ::= Exp6 GTEQ Exp7 
            {
              Object RESULT =null;
		
	System.out.println("Exp6");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp6 ::= Exp6 LTEQ Exp7 
            {
              Object RESULT =null;
		
	System.out.println("Exp6");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp6 ::= Exp6 GT Exp7 
            {
              Object RESULT =null;
		
	System.out.println("Exp6");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp6 ::= Exp6 LT Exp7 
            {
              Object RESULT =null;
		
	System.out.println("Exp6");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp6 ::= Exp7 
            {
              Object RESULT =null;
		
	System.out.println("Exp6");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp5 ::= Exp5 NOTEQ Exp6 
            {
              Object RESULT =null;
		
	System.out.println("Exp5");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp5",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp5 ::= Exp5 EQEQ Exp6 
            {
              Object RESULT =null;
		
	System.out.println("Exp5");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp5",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp5 ::= Exp6 
            {
              Object RESULT =null;
		
	System.out.println("Exp5");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp5",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp4 ::= Exp4 ANDAND Exp5 
            {
              Object RESULT =null;
		
	System.out.println("Exp4");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp4",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp4 ::= Exp5 
            {
              Object RESULT =null;
		
	System.out.println("Exp4");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp4",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp3 ::= Exp3 OROR Exp4 
            {
              Object RESULT =null;
		
	System.out.println("Exp3");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp3",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp3 ::= Exp4 
            {
              Object RESULT =null;
		
	System.out.println("Exp3");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp3",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp2 ::= Exp9 AssignmentOp Exp2 
            {
              Object RESULT =null;
		
	System.out.println("Exp2");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp2",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp2 ::= Exp3 
            {
              Object RESULT =null;
		
	System.out.println("Exp2");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp2",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp ::= Exp COMMA Exp2 
            {
              Object RESULT =null;
		
	System.out.println("Exp");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp ::= Exp2 
            {
              Object RESULT =null;
		
	System.out.println("Exp");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _Stm_ ::= error _Stm_ 
            {
              Object RESULT =null;
		
	System.out.println("_Stm_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Stm_",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // _Stm_ ::= Stm _Stm_ 
            {
              Object RESULT =null;
		
	System.out.println("_Stm_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Stm_",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // _Stm_ ::= Stm 
            {
              Object RESULT =null;
		
	System.out.println("_Stm_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Stm_",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // GetsStm ::= GETS LPAREN ID RPAREN 
            {
              Object RESULT =null;
		
	System.out.println("GetsStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("GetsStm",30, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // _PrintfParam_ ::= COMMA ID _PrintfParam_ 
            {
              Object RESULT =null;
		
	System.out.println("_PrintfParam_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_PrintfParam_",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // _PrintfParam_ ::= 
            {
              Object RESULT =null;
		
	System.out.println("_PrintfParam_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_PrintfParam_",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PrintfStm ::= PRINTF LPAREN STRING _PrintfParam_ RPAREN 
            {
              Object RESULT =null;
		
	System.out.println("PrintfStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PrintfStm",36, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // JumpStm ::= RETURN Exp SEMICOLON 
            {
              Object RESULT =null;
		
	System.out.println("JumpStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("JumpStm",34, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IterStm ::= WHILE LPAREN Exp RPAREN Stm 
            {
              Object RESULT =null;
		
	System.out.println("IterStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IterStm",33, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SelectionStm ::= IF LPAREN Exp RPAREN Stm ELSE Stm 
            {
              Object RESULT =null;
		
	System.out.println("SelectionStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SelectionStm",38, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SelectionStm ::= IF LPAREN Exp RPAREN Stm 
            {
              Object RESULT =null;
		
	System.out.println("SelectionStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SelectionStm",38, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpressionStm ::= GetsStm SEMICOLON 
            {
              Object RESULT =null;
		
	System.out.println("ExpressionStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExpressionStm",27, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpressionStm ::= PrintfStm SEMICOLON 
            {
              Object RESULT =null;
		
	System.out.println("ExpressionStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExpressionStm",27, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpressionStm ::= Exp SEMICOLON 
            {
              Object RESULT =null;
		
	System.out.println("ExpressionStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExpressionStm",27, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpressionStm ::= SEMICOLON 
            {
              Object RESULT =null;
		
	System.out.println("ExpressionStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExpressionStm",27, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CompoundStm ::= LBRACE _Dec_ _Stm_ RBRACE 
            {
              Object RESULT =null;
		
	System.out.println("CompoundStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("CompoundStm",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CompoundStm ::= LBRACE _Dec_ RBRACE 
            {
              Object RESULT =null;
		
	System.out.println("CompoundStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("CompoundStm",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CompoundStm ::= LBRACE _Stm_ RBRACE 
            {
              Object RESULT =null;
		
	System.out.println("CompoundStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("CompoundStm",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CompoundStm ::= LBRACE RBRACE 
            {
              Object RESULT =null;
		
	System.out.println("CompoundStm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("CompoundStm",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stm ::= JumpStm 
            {
              Object RESULT =null;
		
	System.out.println("Stm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Stm",39, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stm ::= IterStm 
            {
              Object RESULT =null;
		
	System.out.println("Stm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Stm",39, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stm ::= SelectionStm 
            {
              Object RESULT =null;
		
	System.out.println("Stm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Stm",39, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stm ::= ExpressionStm 
            {
              Object RESULT =null;
		
	System.out.println("Stm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Stm",39, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stm ::= CompoundStm 
            {
              Object RESULT =null;
		
	System.out.println("Stm");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Stm",39, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // _Initializer_ ::= _Initializer_ COMMA Initializer 
            {
              Object RESULT =null;
		
	System.out.println("_Initializer_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Initializer_",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // _Initializer_ ::= Initializer 
            {
              Object RESULT =null;
		
	System.out.println("_Initializer_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Initializer_",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Initializer ::= LBRACE _Initializer_ COMMA RBRACE 
            {
              Object RESULT =null;
		
	System.out.println("Initializer");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Initializer",32, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Initializer ::= LBRACE _Initializer_ RBRACE 
            {
              Object RESULT =null;
		
	System.out.println("Initializer");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Initializer",32, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Initializer ::= Exp2 
            {
              Object RESULT =null;
		
	System.out.println("Initializer");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Initializer",32, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // _Ident_ ::= ID COMMA _Ident_ 
            {
              Object RESULT =null;
		
	System.out.println("_Ident_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Ident_",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // _Ident_ ::= ID 
            {
              Object RESULT =null;
		
	System.out.println("_Ident_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Ident_",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParameterDeclaration ::= TypeSpecifier DirectDeclarator 
            {
              Object RESULT =null;
		
	System.out.println("ParameterDeclaration");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",35, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParameterDeclaration ::= TypeSpecifier 
            {
              Object RESULT =null;
		
	System.out.println("ParameterDeclaration");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",35, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // _ParameterDeclaration_ ::= ParameterDeclaration COMMA _ParameterDeclaration_ 
            {
              Object RESULT =null;
		
	System.out.println("_ParameterDeclaration_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_ParameterDeclaration_",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // _ParameterDeclaration_ ::= ParameterDeclaration 
            {
              Object RESULT =null;
		
	System.out.println("_ParameterDeclaration_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_ParameterDeclaration_",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DirectDeclarator ::= DirectDeclarator LPAREN RPAREN 
            {
              Object RESULT =null;
		
	System.out.println("DirectDeclarator");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DirectDeclarator ::= DirectDeclarator LPAREN _Ident_ RPAREN 
            {
              Object RESULT =null;
		
	System.out.println("DirectDeclarator");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DirectDeclarator ::= DirectDeclarator LPAREN _ParameterDeclaration_ RPAREN 
            {
              Object RESULT =null;
		
	System.out.println("DirectDeclarator");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DirectDeclarator ::= DirectDeclarator LBRACK RBRACK 
            {
              Object RESULT =null;
		
	System.out.println("DirectDeclarator");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DirectDeclarator ::= DirectDeclarator LBRACK ConstantExpression RBRACK 
            {
              Object RESULT =null;
		
	System.out.println("DirectDeclarator");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DirectDeclarator ::= LPAREN DirectDeclarator RPAREN 
            {
              Object RESULT =null;
		
	System.out.println("DirectDeclarator");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DirectDeclarator ::= ID 
            {
              Object RESULT =null;
		
	System.out.println("DirectDeclarator");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeSpecifier ::= FLOAT 
            {
              Object RESULT =null;
		
	System.out.println("TypeSpecifier");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",40, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeSpecifier ::= INT 
            {
              Object RESULT =null;
		
	System.out.println("TypeSpecifier");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",40, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeSpecifier ::= CHAR 
            {
              Object RESULT =null;
		
	System.out.println("TypeSpecifier");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",40, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypeSpecifier ::= VOID 
            {
              Object RESULT =null;
		
	System.out.println("TypeSpecifier");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",40, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // InitDeclarator ::= DirectDeclarator EQ Initializer 
            {
              Object RESULT =null;
		
	System.out.println("InitDeclarator");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("InitDeclarator",31, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // InitDeclarator ::= DirectDeclarator 
            {
              Object RESULT =null;
		
	System.out.println("InitDeclarator");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("InitDeclarator",31, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // _InitDeclarator_ ::= InitDeclarator COMMA _InitDeclarator_ 
            {
              Object RESULT =null;
		
	System.out.println("_InitDeclarator_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_InitDeclarator_",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // _InitDeclarator_ ::= InitDeclarator 
            {
              Object RESULT =null;
		
	System.out.println("_InitDeclarator_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_InitDeclarator_",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // _Dec_ ::= Dec _Dec_ 
            {
              Object RESULT =null;
		
	System.out.println("_Dec_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Dec_",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // _Dec_ ::= Dec 
            {
              Object RESULT =null;
		
	System.out.println("_Dec_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Dec_",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Dec ::= TypeSpecifier _InitDeclarator_ SEMICOLON 
            {
              Object RESULT =null;
		
	System.out.println("Dec");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Dec",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FunctionDef ::= DirectDeclarator CompoundStm 
            {
              Object RESULT =null;
		
	System.out.println("FunctionDef");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FunctionDef",29, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FunctionDef ::= DirectDeclarator _Dec_ CompoundStm 
            {
              Object RESULT =null;
		
	System.out.println("FunctionDef");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FunctionDef",29, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FunctionDef ::= TypeSpecifier DirectDeclarator CompoundStm 
            {
              Object RESULT =null;
		
	System.out.println("FunctionDef");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FunctionDef",29, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FunctionDef ::= TypeSpecifier DirectDeclarator _Dec_ CompoundStm 
            {
              Object RESULT =null;
		
	System.out.println("FunctionDef");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FunctionDef",29, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ExternalDeclaration ::= Dec 
            {
              Object RESULT =null;
		
	System.out.println("ExternalDeclaration");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExternalDeclaration",28, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ExternalDeclaration ::= FunctionDef 
            {
              Object RESULT =null;
		
	System.out.println("ExternalDeclaration");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExternalDeclaration",28, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // _ExternalDeclaration_ ::= error _ExternalDeclaration_ 
            {
              Object RESULT =null;
		
	System.out.println("_ExternalDeclaration_->error");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_ExternalDeclaration_",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // _ExternalDeclaration_ ::= ExternalDeclaration _ExternalDeclaration_ 
            {
              Object RESULT =null;
		
	System.out.println("_ExternalDeclaration_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_ExternalDeclaration_",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // _ExternalDeclaration_ ::= ExternalDeclaration 
            {
              Object RESULT =null;
		
	System.out.println("_ExternalDeclaration_");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_ExternalDeclaration_",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= _ExternalDeclaration_ 
            {
              Object RESULT =null;
		
	System.out.println("Program");
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Program",37, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

