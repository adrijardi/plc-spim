// Inicio del programa
 Program ::= _ExternalDeclaration_ ;

// Declaraciones globales
 _ExternalDeclaration_ ::= ExternalDeclaration;
 _ExternalDeclaration_ ::= ExternalDeclaration _ExternalDeclaration_;
 _ExternalDeclaration_ ::= error _ExternalDeclaration_;

 ExternalDeclaration ::= FunctionDef ;
 ExternalDeclaration ::= Dec ;
 
// Declaracion de funciones
 FunctionDef ::= TypeSpecifier DirectDeclarator _Dec_ CompoundStm ;
 FunctionDef ::= TypeSpecifier DirectDeclarator CompoundStm ;
 FunctionDef ::= DirectDeclarator _Dec_ CompoundStm ;
 FunctionDef ::= DirectDeclarator CompoundStm ;

// Declaracion de variables
 Dec ::= TypeSpecifier _InitDeclarator_ SEMICOLON ;

 _Dec_ ::= Dec;
 _Dec_ ::= Dec _Dec_; 

 _InitDeclarator_ ::= InitDeclarator ;
 _InitDeclarator_ ::= InitDeclarator COMMA _InitDeclarator_ ;

 InitDeclarator ::= DirectDeclarator ;
 InitDeclarator ::= DirectDeclarator EQ Initializer;

// Declaracion de tipos
 TypeSpecifier ::= VOID;
 TypeSpecifier ::= CHAR;
 TypeSpecifier ::= INT;
 TypeSpecifier ::= FLOAT;

 DirectDeclarator ::= ID ;
 DirectDeclarator ::= LPAREN DirectDeclarator RPAREN ;
 DirectDeclarator ::= DirectDeclarator LBRACK ConstantExpression RBRACK ;
 DirectDeclarator ::= DirectDeclarator LBRACK RBRACK ;
 DirectDeclarator ::= DirectDeclarator LPAREN _ParameterDeclaration_ RPAREN ;
 DirectDeclarator ::= DirectDeclarator LPAREN _Ident_ RPAREN ;
 DirectDeclarator ::= DirectDeclarator LPAREN RPAREN ;

// Declaracion de parametros
 _ParameterDeclaration_ ::= ParameterDeclaration ; 
 _ParameterDeclaration_ ::= ParameterDeclaration COMMA _ParameterDeclaration_ ;

 ParameterDeclaration ::= TypeSpecifier ;
 ParameterDeclaration ::= TypeSpecifier DirectDeclarator ;

// Declaracion de identificaores
 _Ident_ ::= ID ;
 _Ident_ ::= ID COMMA _Ident_ ;

// Inicializadores de identificadores
 Initializer ::= Exp2 ;
 Initializer ::= LBRACE _Initializer_ RBRACE ;
 Initializer ::= LBRACE _Initializer_ COMMA RBRACE ;

 _Initializer_ ::= Initializer ;
 _Initializer_ ::= Initializer COMMA _Initializer_ ;

// Sentencias
 Stm ::= CompoundStm ;
 Stm ::= ExpressionStm ;
 Stm ::= SelectionStm ;
 Stm ::= IterStm ;
 Stm ::= JumpStm ;
 

 CompoundStm ::= LBRACE RBRACE ;
 CompoundStm ::= LBRACE _Stm_ RBRACE ;
 CompoundStm ::= LBRACE _Dec_ RBRACE ;
 CompoundStm ::= LBRACE _Dec_ _Stm_ RBRACE ;

 ExpressionStm ::= SEMICOLON ;
 ExpressionStm ::= Exp SEMICOLON ;
 ExpressionStm ::= PrintfStm SEMICOLON;
 ExpressionStm ::= GetsStm SEMICOLON;

 SelectionStm ::= IF LPAREN Exp RPAREN Stm ;
 SelectionStm ::= IF LPAREN Exp RPAREN Stm ELSE Stm ;

 IterStm ::= WHILE LPAREN Exp RPAREN Stm;

 JumpStm ::= RETURN Exp SEMICOLON ;
 
 PrintfStm ::= PRINTF LPAREN STRING _PrintfParam_ RPAREN;
 
 _PrintfParam_ ::= ;
 _PrintfParam_ ::= COMMA ID _PrintfParam_ ;
 
 GetsStm ::= GETS LPAREN ID RPAREN;

 _Stm_ ::= Stm ;
 _Stm_ ::= Stm _Stm_;
 _Stm_ ::= error _Stm_;

// Expresiones
 Exp ::= Exp2 ;
 Exp ::= Exp COMMA Exp2;
 
 Exp2 ::= Exp3 ;
 Exp2 ::= Exp9 AssignmentOp Exp2;
 
 Exp3 ::= Exp4 ;
 Exp3 ::= Exp3 OROR Exp4;
 
 Exp4 ::= Exp5 ;
 Exp4 ::= Exp4 ANDAND Exp5;

 Exp5 ::= Exp6 ;
 Exp5 ::= Exp5 EQEQ Exp6;
 Exp5 ::= Exp5 NOTEQ Exp6;
 
 Exp6 ::= Exp7 ;
 Exp6 ::= Exp6 LT Exp7;
 Exp6 ::= Exp6 GT Exp7;
 Exp6 ::= Exp6 LTEQ Exp7;
 Exp6 ::= Exp6 GTEQ Exp7;
 
 Exp7 ::= Exp8 ;
 Exp7 ::= Exp7 PLUS Exp8;
 Exp7 ::= Exp7 MINUS Exp8;
 
 Exp8 ::= Exp9 ;
 Exp8 ::= Exp8 MULT Exp9;
 Exp8 ::= Exp8 DIV Exp9;
 
 Exp9 ::= Exp10 ;
 Exp9 ::= PLUSPLUS Exp9;
 Exp9 ::= MINUSMINUS Exp9;
 Exp9 ::= NOT Exp14;
 
 Exp10 ::= Exp11 ;
 Exp10 ::= Exp10 LBRACK Exp RBRACK ;
 Exp10 ::= Exp10 LPAREN RPAREN;
 Exp10 ::= Exp10 LPAREN _Exp2_ RPAREN;
 Exp10 ::= Exp10 PLUSPLUS;
 Exp10 ::= Exp10 MINUSMINUS;
 
 Exp11 ::= LPAREN Exp RPAREN ;
 Exp11 ::= ID;
 Exp11 ::= Constant;

 Constant ::= NUMBERF;
 Constant ::= CHARACTER;
 Constant ::= INTEGER;

 ConstantExpression ::= Exp3;

 _Exp2_ ::= Exp2 ;
 _Exp2_ ::= Exp2 COMMA _Exp2_;

// Simbolos de asignacion
 AssignmentOp ::= EQ ;
 AssignmentOp ::= MULTEQ ;
 AssignmentOp ::= DIVEQ ;
 AssignmentOp ::= PLUSEQ ;
 AssignmentOp ::= MINUSEQ ;
 
 
 //No terminals
 _Dec_
 _Exp2_
 _ExternalDeclaration_
 _Ident_
 _InitDeclarator_
 _Initializer_
 _ParameterDeclaration_
 _PrintfParam_
 _Stm_
 
 AssignmentOp
 CompoundStm
 Constant
 ConstantExpression
 Dec
 DirectDeclarator
 Exp
 Exp2
 Exp3
 Exp4
 Exp5
 Exp6
 Exp7
 Exp8
 Exp9
 Exp10
 Exp11
 ExpressionStm
 ExternalDeclaration
 FunctionDef
 GetsStm
 InitDeclarator
 Initializer
 IterStm
 JumpStm
 ParameterDeclaration
 PrintfStm
 Program
 SelectionStm
 Stm
 TypeSpecifier
 
