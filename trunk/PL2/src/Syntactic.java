
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 24 14:39:59 CEST 2009
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.IOException;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 24 14:39:59 CEST 2009
  */
public class Syntactic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\046\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\004\000\002\035\003" +
    "\000\002\035\003\000\002\036\005\000\002\016\005\000" +
    "\002\002\003\000\002\002\004\000\002\006\003\000\002" +
    "\006\005\000\002\040\003\000\002\040\005\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\017\003\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\017\005\000\002\010\003\000\002" +
    "\010\005\000\002\044\004\000\002\005\003\000\002\005" +
    "\005\000\002\041\003\000\002\041\005\000\002\041\006" +
    "\000\002\007\003\000\002\007\005\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\013\004\000\002\013\005\000\002\013" +
    "\005\000\002\013\006\000\002\034\003\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\047\007\000" +
    "\002\047\011\000\002\042\007\000\002\043\005\000\002" +
    "\045\010\000\002\045\010\000\002\037\006\000\002\011" +
    "\003\000\002\011\004\000\002\011\004\000\002\020\003" +
    "\000\002\020\005\000\002\021\003\000\002\021\005\000" +
    "\002\022\003\000\002\022\005\000\002\023\003\000\002" +
    "\023\005\000\002\024\003\000\002\024\005\000\002\024" +
    "\005\000\002\025\003\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\026\003\000" +
    "\002\026\005\000\002\026\005\000\002\027\003\000\002" +
    "\027\005\000\002\027\005\000\002\033\003\000\002\033" +
    "\006\000\002\030\003\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\031\003\000\002\031\006\000" +
    "\002\031\005\000\002\031\006\000\002\031\004\000\002" +
    "\031\004\000\002\032\005\000\002\032\003\000\002\032" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\003\003\000\002\003\005\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\014\003\013\006\010\051\004\053\016\055" +
    "\015\001\002\000\006\040\ufff0\047\ufff0\001\002\000\004" +
    "\002\267\001\002\000\004\047\021\001\002\000\016\002" +
    "\ufffb\003\ufffb\006\ufffb\051\ufffb\053\ufffb\055\ufffb\001\002" +
    "\000\006\040\ufff2\047\ufff2\001\002\000\004\002\000\001" +
    "\002\000\016\002\ufffc\003\ufffc\006\ufffc\051\ufffc\053\ufffc" +
    "\055\ufffc\001\002\000\014\003\013\006\010\051\004\053" +
    "\016\055\015\001\002\000\016\002\uffff\003\013\006\010" +
    "\051\004\053\016\055\015\001\002\000\006\040\ufff1\047" +
    "\ufff1\001\002\000\006\040\uffef\047\uffef\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\ufffd\001\002\000\020\022" +
    "\uffee\037\uffee\040\uffee\041\uffee\043\uffee\045\uffee\046\uffee" +
    "\001\002\000\004\045\266\001\002\000\016\022\030\037" +
    "\032\041\177\043\031\045\ufff4\046\ufff4\001\002\000\006" +
    "\045\ufff6\046\025\001\002\000\004\047\021\001\002\000" +
    "\004\045\ufff5\001\002\000\014\022\030\037\032\043\031" +
    "\045\ufff4\046\ufff4\001\002\000\024\014\057\031\072\034" +
    "\060\037\061\041\166\047\062\050\073\052\056\054\055" +
    "\001\002\000\022\014\057\031\072\034\060\037\061\047" +
    "\062\050\073\052\056\054\055\001\002\000\016\006\010" +
    "\040\040\047\036\051\004\053\016\055\015\001\002\000" +
    "\004\047\021\001\002\000\006\040\uffe9\046\uffe9\001\002" +
    "\000\004\040\046\001\002\000\006\040\uffe6\046\044\001" +
    "\002\000\006\040\042\046\041\001\002\000\020\022\uffea" +
    "\037\uffea\040\uffea\041\uffea\043\uffea\045\uffea\046\uffea\001" +
    "\002\000\012\006\010\051\004\053\016\055\015\001\002" +
    "\000\020\022\uffec\037\uffec\040\uffec\041\uffec\043\uffec\045" +
    "\uffec\046\uffec\001\002\000\006\040\uffe8\046\uffe8\001\002" +
    "\000\004\047\036\001\002\000\004\040\uffe5\001\002\000" +
    "\020\022\uffeb\037\uffeb\040\uffeb\041\uffeb\043\uffeb\045\uffeb" +
    "\046\uffeb\001\002\000\012\037\032\040\uffe7\043\031\046" +
    "\uffe7\001\002\000\044\013\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\023\uffb5\024\uffb5\026\uffb5\030\uffb5\033" +
    "\uffb5\036\uffb5\040\uffb5\042\uffb5\044\uffb5\045\uffb5\046\uffb5" +
    "\001\002\000\066\013\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\037\uffac\040\uffac\042\uffac\043\uffac\044\uffac" +
    "\045\uffac\046\uffac\001\002\000\066\013\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\155\032\uffb0\033" +
    "\uffb0\034\153\035\uffb0\036\uffb0\037\154\040\uffb0\042\uffb0" +
    "\043\152\044\uffb0\045\uffb0\046\uffb0\001\002\000\066\013" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\001" +
    "\002\000\004\044\151\001\002\000\066\013\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\001\002\000\066" +
    "\013\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\001\002\000\022\014\057\031\072\034\060\037\061\047" +
    "\062\050\073\052\056\054\055\001\002\000\022\014\057" +
    "\031\072\034\060\037\075\047\062\050\073\052\056\054" +
    "\055\001\002\000\032\006\010\014\057\031\072\034\060" +
    "\037\061\047\062\050\073\051\004\052\056\053\016\054" +
    "\055\055\015\001\002\000\066\013\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\001\002\000\056\013\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\032\uffb2" +
    "\033\uffb2\035\uffb2\036\uffb2\040\uffb2\042\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\001\002\000\044\013\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\023\uffb8\024\uffb8\026\121\030" +
    "\122\033\uffb8\036\uffb8\040\uffb8\042\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\001\002\000\040\013\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\033\116\036\117" +
    "\040\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd\001\002\000" +
    "\034\013\uffc0\015\114\016\111\017\112\020\113\021\uffc0" +
    "\023\uffc0\024\uffc0\040\uffc0\042\uffc0\044\uffc0\045\uffc0\046" +
    "\uffc0\001\002\000\024\013\106\021\107\023\uffc2\024\uffc2" +
    "\040\uffc2\042\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000" +
    "\020\023\104\024\uffc4\040\uffc4\042\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\001\002\000\006\024\102\044\uffa0\001\002\000" +
    "\022\014\057\031\072\034\060\037\075\047\062\050\073" +
    "\052\056\054\055\001\002\000\066\013\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\001\002\000\056\013" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\032" +
    "\uffaf\033\uffaf\035\uffaf\036\uffaf\040\uffaf\042\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\001\002\000\022\014\057\031\072\034" +
    "\060\037\061\047\062\050\073\052\056\054\055\001\002" +
    "\000\056\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\136\023\uffb2\024\uffb2\025\141\026\uffb2\027\135" +
    "\030\uffb2\032\137\033\uffb2\035\142\036\uffb2\040\uffb2\042" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\001\002\000\006\040\133" +
    "\046\132\001\002\000\016\024\102\040\uffc6\042\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\001\002\000\012\040\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\001\002\000\022\014\057\031\072\034" +
    "\060\037\061\047\062\050\073\052\056\054\055\001\002" +
    "\000\020\023\104\024\uffc3\040\uffc3\042\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\001\002\000\022\014\057\031\072\034\060" +
    "\037\061\047\062\050\073\052\056\054\055\001\002\000" +
    "\024\013\106\021\107\023\uffc1\024\uffc1\040\uffc1\042\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\001\002\000\022\014\057\031" +
    "\072\034\060\037\061\047\062\050\073\052\056\054\055" +
    "\001\002\000\022\014\057\031\072\034\060\037\061\047" +
    "\062\050\073\052\056\054\055\001\002\000\034\013\uffbf" +
    "\015\114\016\111\017\112\020\113\021\uffbf\023\uffbf\024" +
    "\uffbf\040\uffbf\042\uffbf\044\uffbf\045\uffbf\046\uffbf\001\002" +
    "\000\022\014\057\031\072\034\060\037\061\047\062\050" +
    "\073\052\056\054\055\001\002\000\022\014\057\031\072" +
    "\034\060\037\061\047\062\050\073\052\056\054\055\001" +
    "\002\000\022\014\057\031\072\034\060\037\061\047\062" +
    "\050\073\052\056\054\055\001\002\000\022\014\057\031" +
    "\072\034\060\037\061\047\062\050\073\052\056\054\055" +
    "\001\002\000\040\013\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\023\uffba\024\uffba\033\116\036\117\040\uffba" +
    "\042\uffba\044\uffba\045\uffba\046\uffba\001\002\000\022\014" +
    "\057\031\072\034\060\037\061\047\062\050\073\052\056" +
    "\054\055\001\002\000\022\014\057\031\072\034\060\037" +
    "\061\047\062\050\073\052\056\054\055\001\002\000\044" +
    "\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023" +
    "\uffb6\024\uffb6\026\121\030\122\033\uffb6\036\uffb6\040\uffb6" +
    "\042\uffb6\044\uffb6\045\uffb6\046\uffb6\001\002\000\022\014" +
    "\057\031\072\034\060\037\061\047\062\050\073\052\056" +
    "\054\055\001\002\000\022\014\057\031\072\034\060\037" +
    "\061\047\062\050\073\052\056\054\055\001\002\000\044" +
    "\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\023" +
    "\uffb3\024\uffb3\026\uffb3\030\uffb3\033\uffb3\036\uffb3\040\uffb3" +
    "\042\uffb3\044\uffb3\045\uffb3\046\uffb3\001\002\000\044\013" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\023\uffb4" +
    "\024\uffb4\026\uffb4\030\uffb4\033\uffb4\036\uffb4\040\uffb4\042" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\001\002\000\044\013\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7\024" +
    "\uffb7\026\121\030\122\033\uffb7\036\uffb7\040\uffb7\042\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\001\002\000\040\013\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb\024\uffbb" +
    "\033\116\036\117\040\uffbb\042\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\001\002\000\040\013\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\023\uffb9\024\uffb9\033\116\036\117\040" +
    "\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9\001\002\000\040" +
    "\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\023" +
    "\uffbc\024\uffbc\033\116\036\117\040\uffbc\042\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\001\002\000\034\013\uffbe\015\114\016" +
    "\111\017\112\020\113\021\uffbe\023\uffbe\024\uffbe\040\uffbe" +
    "\042\uffbe\044\uffbe\045\uffbe\046\uffbe\001\002\000\022\014" +
    "\057\031\072\034\060\037\061\047\062\050\073\052\056" +
    "\054\055\001\002\000\066\013\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\001\002\000\012\040\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\001\002\000\022\014\uff9b\031\uff9b" +
    "\034\uff9b\037\uff9b\047\uff9b\050\uff9b\052\uff9b\054\uff9b\001" +
    "\002\000\022\014\uff9d\031\uff9d\034\uff9d\037\uff9d\047\uff9d" +
    "\050\uff9d\052\uff9d\054\uff9d\001\002\000\022\014\uff9a\031" +
    "\uff9a\034\uff9a\037\uff9a\047\uff9a\050\uff9a\052\uff9a\054\uff9a" +
    "\001\002\000\022\014\057\031\072\034\060\037\061\047" +
    "\062\050\073\052\056\054\055\001\002\000\022\014\uff9c" +
    "\031\uff9c\034\uff9c\037\uff9c\047\uff9c\050\uff9c\052\uff9c\054" +
    "\uff9c\001\002\000\022\014\uff99\031\uff99\034\uff99\037\uff99" +
    "\047\uff99\050\uff99\052\uff99\054\uff99\001\002\000\014\040" +
    "\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\001\002\000\004" +
    "\040\145\001\002\000\022\014\057\031\072\034\060\037" +
    "\061\047\062\050\073\052\056\054\055\001\002\000\056" +
    "\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\032\uffb1\033\uffb1\035\uffb1\036\uffb1\040\uffb1\042\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\001\002\000\056\013\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\032\uffae\033\uffae" +
    "\035\uffae\036\uffae\040\uffae\042\uffae\044\uffae\045\uffae\046" +
    "\uffae\001\002\000\056\013\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\032\uffad\033\uffad\035\uffad\036\uffad" +
    "\040\uffad\042\uffad\044\uffad\045\uffad\046\uffad\001\002\000" +
    "\020\022\uffed\037\uffed\040\uffed\041\uffed\043\uffed\045\uffed" +
    "\046\uffed\001\002\000\022\014\057\031\072\034\060\037" +
    "\061\047\062\050\073\052\056\054\055\001\002\000\066" +
    "\013\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\001\002\000\024\014\057\031\072\034\060\037\061\040" +
    "\156\047\062\050\073\052\056\054\055\001\002\000\066" +
    "\013\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\001\002\000\066\013\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\001\002\000\006\040\uff9f\046\162\001" +
    "\002\000\004\040\161\001\002\000\066\013\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\001\002\000\022" +
    "\014\057\031\072\034\060\037\061\047\062\050\073\052" +
    "\056\054\055\001\002\000\004\040\uff9e\001\002\000\006" +
    "\044\165\046\132\001\002\000\066\013\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\001\002\000\024\014" +
    "\057\031\072\034\060\037\061\041\166\047\062\050\073" +
    "\052\056\054\055\001\002\000\006\045\ufff3\046\ufff3\001" +
    "\002\000\010\042\uffe4\045\uffe4\046\uffe4\001\002\000\006" +
    "\042\uffe1\046\uffe1\001\002\000\006\042\174\046\173\001" +
    "\002\000\026\014\057\031\072\034\060\037\061\041\166" +
    "\042\175\047\062\050\073\052\056\054\055\001\002\000" +
    "\010\042\uffe3\045\uffe3\046\uffe3\001\002\000\010\042\uffe2" +
    "\045\uffe2\046\uffe2\001\002\000\006\042\uffe0\046\uffe0\001" +
    "\002\000\054\003\214\004\217\005\224\006\010\007\211" +
    "\011\222\012\212\014\057\031\072\034\060\037\061\041" +
    "\177\042\223\045\207\047\062\050\073\051\004\052\056" +
    "\053\016\054\055\055\015\001\002\000\016\002\ufffa\003" +
    "\ufffa\006\ufffa\051\ufffa\053\ufffa\055\ufffa\001\002\000\004" +
    "\042\265\001\002\000\046\003\uffdb\004\uffdb\005\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb\031\uffdb\034\uffdb" +
    "\037\uffdb\041\uffdb\042\uffdb\045\uffdb\047\uffdb\050\uffdb\052" +
    "\uffdb\054\uffdb\001\002\000\054\003\ufff8\004\ufff8\005\ufff8" +
    "\006\010\007\ufff8\011\ufff8\012\ufff8\014\ufff8\031\ufff8\034" +
    "\ufff8\037\ufff8\041\ufff8\042\ufff8\045\ufff8\047\ufff8\050\ufff8" +
    "\051\004\052\ufff8\053\016\054\ufff8\055\015\001\002\000" +
    "\004\045\263\001\002\000\004\047\021\001\002\000\046" +
    "\003\uffde\004\uffde\005\uffde\007\uffde\010\uffde\011\uffde\012" +
    "\uffde\014\uffde\031\uffde\034\uffde\037\uffde\041\uffde\042\uffde" +
    "\045\uffde\047\uffde\050\uffde\052\uffde\054\uffde\001\002\000" +
    "\046\003\uffd6\004\uffd6\005\uffd6\007\uffd6\010\uffd6\011\uffd6" +
    "\012\uffd6\014\uffd6\031\uffd6\034\uffd6\037\uffd6\041\uffd6\042" +
    "\uffd6\045\uffd6\047\uffd6\050\uffd6\052\uffd6\054\uffd6\001\002" +
    "\000\044\003\214\004\217\005\224\007\211\011\222\012" +
    "\212\014\057\031\072\034\060\037\061\041\177\042\uffcb" +
    "\045\207\047\062\050\073\052\056\054\055\001\002\000" +
    "\004\037\254\001\002\000\022\014\057\031\072\034\060" +
    "\037\061\047\062\050\073\052\056\054\055\001\002\000" +
    "\046\003\uffdf\004\uffdf\005\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\014\uffdf\031\uffdf\034\uffdf\037\uffdf\041\uffdf\042" +
    "\uffdf\045\uffdf\047\uffdf\050\uffdf\052\uffdf\054\uffdf\001\002" +
    "\000\042\003\214\004\217\005\224\007\211\011\222\012" +
    "\212\014\057\031\072\034\060\037\061\041\177\045\207" +
    "\047\062\050\073\052\056\054\055\001\002\000\004\045" +
    "\250\001\002\000\046\003\uffdc\004\uffdc\005\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\014\uffdc\031\uffdc\034\uffdc\037" +
    "\uffdc\041\uffdc\042\uffdc\045\uffdc\047\uffdc\050\uffdc\052\uffdc" +
    "\054\uffdc\001\002\000\004\037\241\001\002\000\006\045" +
    "\240\046\132\001\002\000\046\003\uffdd\004\uffdd\005\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\031\uffdd\034" +
    "\uffdd\037\uffdd\041\uffdd\042\uffdd\045\uffdd\047\uffdd\050\uffdd" +
    "\052\uffdd\054\uffdd\001\002\000\004\037\234\001\002\000" +
    "\060\002\uffda\003\uffda\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\014\uffda\031\uffda\034\uffda\037" +
    "\uffda\041\uffda\042\uffda\045\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\001\002\000\004\037" +
    "\231\001\002\000\044\003\214\004\217\005\224\007\211" +
    "\011\222\012\212\014\057\031\072\034\060\037\061\041" +
    "\177\042\227\045\207\047\062\050\073\052\056\054\055" +
    "\001\002\000\004\042\230\001\002\000\060\002\uffd8\003" +
    "\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\014\uffd8\031\uffd8\034\uffd8\037\uffd8\041\uffd8\042" +
    "\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\001\002\000\060\002\uffd7\003\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\014\uffd7\031\uffd7\034\uffd7\037\uffd7\041\uffd7\042\uffd7\045" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\001\002\000\004\047\232\001\002\000\004\040" +
    "\233\001\002\000\004\045\uffcc\001\002\000\022\014\057" +
    "\031\072\034\060\037\061\047\062\050\073\052\056\054" +
    "\055\001\002\000\006\040\236\046\132\001\002\000\040" +
    "\004\217\005\224\007\211\011\222\012\212\014\057\031" +
    "\072\034\060\037\061\041\177\045\207\047\062\050\073" +
    "\052\056\054\055\001\002\000\046\003\uffd0\004\uffd0\005" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\014\uffd0\031\uffd0" +
    "\034\uffd0\037\uffd0\041\uffd0\042\uffd0\045\uffd0\047\uffd0\050" +
    "\uffd0\052\uffd0\054\uffd0\001\002\000\046\003\uffd5\004\uffd5" +
    "\005\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\014\uffd5\031" +
    "\uffd5\034\uffd5\037\uffd5\041\uffd5\042\uffd5\045\uffd5\047\uffd5" +
    "\050\uffd5\052\uffd5\054\uffd5\001\002\000\004\056\242\001" +
    "\002\000\004\046\243\001\002\000\006\047\244\056\245" +
    "\001\002\000\004\040\247\001\002\000\004\040\246\001" +
    "\002\000\004\045\uffce\001\002\000\004\045\uffcd\001\002" +
    "\000\046\003\uffd4\004\uffd4\005\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\014\uffd4\031\uffd4\034\uffd4\037\uffd4\041\uffd4" +
    "\042\uffd4\045\uffd4\047\uffd4\050\uffd4\052\uffd4\054\uffd4\001" +
    "\002\000\004\042\uffc9\001\002\000\006\045\253\046\132" +
    "\001\002\000\046\003\uffcf\004\uffcf\005\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\014\uffcf\031\uffcf\034\uffcf\037\uffcf" +
    "\041\uffcf\042\uffcf\045\uffcf\047\uffcf\050\uffcf\052\uffcf\054" +
    "\uffcf\001\002\000\022\014\057\031\072\034\060\037\061" +
    "\047\062\050\073\052\056\054\055\001\002\000\006\040" +
    "\256\046\132\001\002\000\040\004\217\005\224\007\211" +
    "\011\222\012\212\014\057\031\072\034\060\037\061\041" +
    "\177\045\207\047\062\050\073\052\056\054\055\001\002" +
    "\000\046\003\uffd2\004\uffd2\005\uffd2\007\uffd2\010\260\011" +
    "\uffd2\012\uffd2\014\uffd2\031\uffd2\034\uffd2\037\uffd2\041\uffd2" +
    "\042\uffd2\045\uffd2\047\uffd2\050\uffd2\052\uffd2\054\uffd2\001" +
    "\002\000\040\004\217\005\224\007\211\011\222\012\212" +
    "\014\057\031\072\034\060\037\061\041\177\045\207\047" +
    "\062\050\073\052\056\054\055\001\002\000\046\003\uffd1" +
    "\004\uffd1\005\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\014" +
    "\uffd1\031\uffd1\034\uffd1\037\uffd1\041\uffd1\042\uffd1\045\uffd1" +
    "\047\uffd1\050\uffd1\052\uffd1\054\uffd1\001\002\000\004\042" +
    "\uffca\001\002\000\046\003\uffd3\004\uffd3\005\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\014\uffd3\031\uffd3\034\uffd3\037" +
    "\uffd3\041\uffd3\042\uffd3\045\uffd3\047\uffd3\050\uffd3\052\uffd3" +
    "\054\uffd3\001\002\000\044\003\ufff7\004\ufff7\005\ufff7\007" +
    "\ufff7\011\ufff7\012\ufff7\014\ufff7\031\ufff7\034\ufff7\037\ufff7" +
    "\041\ufff7\042\ufff7\045\ufff7\047\ufff7\050\ufff7\052\ufff7\054" +
    "\ufff7\001\002\000\060\002\uffd9\003\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\014\uffd9\031" +
    "\uffd9\034\uffd9\037\uffd9\041\uffd9\042\uffd9\045\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\001" +
    "\002\000\056\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\011\ufff9\012\ufff9\014\ufff9\031\ufff9\034\ufff9\037" +
    "\ufff9\041\ufff9\042\ufff9\045\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\053\ufff9\054\ufff9\055\ufff9\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\016\004\010\016\006\035\013\036\011\046" +
    "\004\051\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\021\017\022\040\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\017\016\006\035\013\036\011\051\005\001" +
    "\001\000\014\004\016\016\006\035\013\036\011\051\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\177\001\001\000\002\001\001\000\010\006" +
    "\025\017\026\040\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\014\052\021\167\022\077\023\067\024" +
    "\066\025\065\026\064\027\063\030\075\031\051\032\050" +
    "\033\047\041\166\001\001\000\032\014\052\015\053\022" +
    "\070\023\067\024\066\025\065\026\064\027\063\030\062" +
    "\031\051\032\050\033\047\001\001\000\012\005\034\010" +
    "\036\044\033\051\032\001\001\000\004\017\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\042\051\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\052\030\062\031\051\032" +
    "\050\033\147\001\001\000\012\014\052\030\146\031\051" +
    "\032\050\001\001\000\036\014\052\020\076\021\100\022" +
    "\077\023\067\024\066\025\065\026\064\027\063\030\075" +
    "\031\051\032\050\033\047\051\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\052\030\073\031\051\032\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\014" +
    "\052\020\076\021\100\022\077\023\067\024\066\025\065" +
    "\026\064\027\063\030\075\031\051\032\050\033\047\001" +
    "\001\000\004\012\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\052\023\102\024" +
    "\066\025\065\026\064\027\063\030\062\031\051\032\050" +
    "\033\047\001\001\000\002\001\001\000\024\014\052\024" +
    "\104\025\065\026\064\027\063\030\062\031\051\032\050" +
    "\033\047\001\001\000\002\001\001\000\022\014\052\025" +
    "\130\026\064\027\063\030\062\031\051\032\050\033\047" +
    "\001\001\000\022\014\052\025\107\026\064\027\063\030" +
    "\062\031\051\032\050\033\047\001\001\000\002\001\001" +
    "\000\020\014\052\026\127\027\063\030\062\031\051\032" +
    "\050\033\047\001\001\000\020\014\052\026\126\027\063" +
    "\030\062\031\051\032\050\033\047\001\001\000\020\014" +
    "\052\026\125\027\063\030\062\031\051\032\050\033\047" +
    "\001\001\000\020\014\052\026\114\027\063\030\062\031" +
    "\051\032\050\033\047\001\001\000\002\001\001\000\016" +
    "\014\052\027\124\030\062\031\051\032\050\033\047\001" +
    "\001\000\016\014\052\027\117\030\062\031\051\032\050" +
    "\033\047\001\001\000\002\001\001\000\014\014\052\030" +
    "\062\031\051\032\050\033\123\001\001\000\014\014\052" +
    "\030\062\031\051\032\050\033\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\014\052\021\133\022\077\023\067\024\066\025\065" +
    "\026\064\027\063\030\075\031\051\032\050\033\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\014\052\021" +
    "\142\022\077\023\067\024\066\025\065\026\064\027\063" +
    "\030\075\031\051\032\050\033\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\052\030\062\031\051\032\050\033\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\014\052\020\163\021\100\022" +
    "\077\023\067\024\066\025\065\026\064\027\063\030\075" +
    "\031\051\032\050\033\047\001\001\000\002\001\001\000" +
    "\034\003\157\014\052\021\156\022\077\023\067\024\066" +
    "\025\065\026\064\027\063\030\075\031\051\032\050\033" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\162\014\052\021\156\022\077\023\067\024\066\025\065" +
    "\026\064\027\063\030\075\031\051\032\050\033\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\007\171\014\052\021\167\022\077\023\067\024" +
    "\066\025\065\026\064\027\063\030\075\031\051\032\050" +
    "\033\047\041\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\014\052" +
    "\021\167\022\077\023\067\024\066\025\065\026\064\027" +
    "\063\030\075\031\051\032\050\033\047\041\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\002\224\011\200\013\212\014\052\016\202\020\217" +
    "\021\100\022\077\023\067\024\066\025\065\026\064\027" +
    "\063\030\075\031\051\032\050\033\047\034\205\037\203" +
    "\042\215\043\201\045\214\047\220\050\207\051\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\263\016\202\051\204\001\001\000\002\001" +
    "\001\000\010\006\021\017\026\040\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\011\261\013\212\014" +
    "\052\020\217\021\100\022\077\023\067\024\066\025\065" +
    "\026\064\027\063\030\075\031\051\032\050\033\047\034" +
    "\205\037\203\042\215\043\201\045\214\047\220\050\207" +
    "\001\001\000\002\001\001\000\034\014\052\020\251\021" +
    "\100\022\077\023\067\024\066\025\065\026\064\027\063" +
    "\030\075\031\051\032\050\033\047\001\001\000\002\001" +
    "\001\000\056\011\250\013\212\014\052\020\217\021\100" +
    "\022\077\023\067\024\066\025\065\026\064\027\063\030" +
    "\075\031\051\032\050\033\047\034\205\037\203\042\215" +
    "\043\201\045\214\047\220\050\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\011\225\013\212\014\052\020\217" +
    "\021\100\022\077\023\067\024\066\025\065\026\064\027" +
    "\063\030\075\031\051\032\050\033\047\034\205\037\203" +
    "\042\215\043\201\045\214\047\220\050\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\014" +
    "\052\020\234\021\100\022\077\023\067\024\066\025\065" +
    "\026\064\027\063\030\075\031\051\032\050\033\047\001" +
    "\001\000\002\001\001\000\054\013\212\014\052\020\217" +
    "\021\100\022\077\023\067\024\066\025\065\026\064\027" +
    "\063\030\075\031\051\032\050\033\047\034\205\037\203" +
    "\042\215\043\201\045\214\047\220\050\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\014\052\020\254\021\100\022\077\023\067\024\066" +
    "\025\065\026\064\027\063\030\075\031\051\032\050\033" +
    "\047\001\001\000\002\001\001\000\054\013\212\014\052" +
    "\020\217\021\100\022\077\023\067\024\066\025\065\026" +
    "\064\027\063\030\075\031\051\032\050\033\047\034\205" +
    "\037\203\042\215\043\201\045\214\047\220\050\256\001" +
    "\001\000\002\001\001\000\054\013\212\014\052\020\217" +
    "\021\100\022\077\023\067\024\066\025\065\026\064\027" +
    "\063\030\075\031\051\032\050\033\047\034\205\037\203" +
    "\042\215\043\201\045\214\047\220\050\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Lexer lex;
	private Syntactic sin;
	private boolean error;
	private java.util.LinkedList<AnalyzerError> errorsList;
	private java.util.LinkedList<AnalyzerError> warningList;
	private NodeAnalyzer main;
	private StateAnalyzer state;
	//TODO quitar luego
	private int auxVar = 0;
	int auxCountParamDec = 0;
	private Generator generator;

	public static void main(String args[]) throws Exception{
		System.out.println("Con argumentos " + args[0]);
		Lexer lex = new Lexer(new java.io.FileReader(args[0]));
		FunTable.getInstance();
		Syntactic sin = new Syntactic(lex);
		sin.initializeParser(lex, args[0]);
		sin.runParser();
	}
	
	private void initializeParser(Lexer lexer, String filename) throws IOException{
		generator = new Generator(filename);
		error = false;
		lex = lexer;
		errorsList = new java.util.LinkedList<AnalyzerError>();
		warningList = new java.util.LinkedList<AnalyzerError>();
		lookahead = new Symbol[]{new Symbol(sym.SEMICOLON), new Symbol(sym.RBRACE)};
		state = new StateAnalyzer();
	}
	
	public StateAnalyzer getState() {
		return state;
	}
	
	public int getLine(){
		return lex.getLine();
	}
	
	private void runParser(){
		
		try {
			parse();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		checkVariables();
		
		showWarnings();
		
		if(isError()){
			showErrors();
		}else{
			generate();
			VarTable.getInstance().printTable();
			FunTable.getInstance().printTable();
		}
	}
	
	private void showErrors(){
		System.out.println("No se generara codigo, se han encontrado "+errorsList.size()+" errores");
		for (AnalyzerError ae : errorsList) {
			System.out.println(ae);
		}
	}
	
	private void showWarnings(){
		System.out.println("Se han encontrado "+warningList.size()+" Warnings");
		for (AnalyzerError ae : warningList) {
			System.out.println(ae.toWarningString());
		}
	}
	
	private void generate(){
		generator.setMain(main);
		generator.generate();
	}
	
	private boolean isError() {
		return this.error;
	}
	
	public void addError(int line, String msg){
		System.out.println("!!!!! ERROR !!!!");
		if(this.error == false)
			this.error = true;
		this.errorsList.add(new AnalyzerError(line,msg));
	}
	
	public void addError(String msg, int lineMod){
		addError(getLine()+ lineMod, msg);
	}
	
	public void addError(String msg){
		addError(getLine(), msg);
	}
	
	public void addWarning(int line, String msg){		
		this.warningList.add(new AnalyzerError(line,msg));
	}
	
	public void addWarning(String msg, int lineMod){
		addWarning(getLine()+lineMod, msg);
	}
	
	public void addWarning(String msg){
		addWarning(getLine(), msg);
	}
	
	public void setMain(NodeAnalyzer main) {
		this.main = main;
	}
	
	public void checkVariables(){
		main.checkVariables(this);
	}
	
	//TODO quitar luego
	public int getAuxVar(){
		return auxVar++;
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // AssignmentOp ::= MINUSEQ 
            {
              Object RESULT =null;
		
	System.out.println("AssignmentOp");
	NodeAnalyzer nodo = new NodeAnalyzer("AssignmentOp");
	nodo.setAtribute(NodeKeys.ASIGNMENT, "-=");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("AssignmentOp",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AssignmentOp ::= PLUSEQ 
            {
              Object RESULT =null;
		
	System.out.println("AssignmentOp");
	NodeAnalyzer nodo =new NodeAnalyzer("AssignmentOp");
	nodo.setAtribute(NodeKeys.ASIGNMENT, "+=");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("AssignmentOp",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // AssignmentOp ::= DIVEQ 
            {
              Object RESULT =null;
		
	System.out.println("AssignmentOp");
	NodeAnalyzer nodo =new NodeAnalyzer("AssignmentOp");
	nodo.setAtribute(NodeKeys.ASIGNMENT, "/=");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("AssignmentOp",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AssignmentOp ::= MULTEQ 
            {
              Object RESULT =null;
		
	System.out.println("AssignmentOp");
	NodeAnalyzer nodo =new NodeAnalyzer("AssignmentOp");
	nodo.setAtribute(NodeKeys.ASIGNMENT, "*=");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("AssignmentOp",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AssignmentOp ::= EQ 
            {
              Object RESULT =null;
		
	System.out.println("AssignmentOp");
	NodeAnalyzer nodo =new NodeAnalyzer("AssignmentOp");
	nodo.setAtribute(NodeKeys.ASIGNMENT, "=");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("AssignmentOp",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // _Exp2_ ::= Exp2 COMMA _Exp2_ 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int le2left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int le2right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object le2 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_Exp2_");
 	((NodeAnalyzer)le2).addLeftHijo((NodeAnalyzer)e2);
	RESULT = le2;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Exp2_",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // _Exp2_ ::= Exp2 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_Exp2_");
	NodeAnalyzer nodo =new NodeAnalyzer("_Exp2_");
	nodo.addLeftHijo((NodeAnalyzer)e2);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Exp2_",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ConstantExpression ::= Exp3 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("ConstantExpression");
	NodeAnalyzer nodo =new NodeAnalyzer("ConstantExpression");
	RESULT = nodo ;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ConstantExpression",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Constant ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Constant");
	NodeAnalyzer nodo =new NodeAnalyzer("Constant");
	nodo.setNodeType(NodeType.CONSTANT);
	nodo.setAtribute(NodeKeys.TYPE, "int");
	nodo.setAtribute(NodeKeys.CONST_INT_VALUE, ""+i.intValue());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Constant ::= CHARACTER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Constant");
	NodeAnalyzer nodo =new NodeAnalyzer("Constant");
	nodo.setNodeType(NodeType.CONSTANT);
	nodo.setAtribute(NodeKeys.TYPE, "char");
	nodo.setAtribute(NodeKeys.CONST_CHAR_VALUE, ""+c.charValue());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Constant ::= NUMBERF 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Constant");
	NodeAnalyzer nodo =new NodeAnalyzer("Constant");
	nodo.setNodeType(NodeType.CONSTANT);
	nodo.setAtribute(NodeKeys.TYPE, "float");
	nodo.setAtribute(NodeKeys.CONST_FLOAT_VALUE, ""+f.floatValue());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp11 ::= Constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp11");
	RESULT = c;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp11",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp11 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp11");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp11");
	//nodo.setStates(parser.getState().getDecStates().name());
	nodo.setNodeType(NodeType.VAR);
	nodo.setAtribute(NodeKeys.VAR_ID, id.toString());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp11",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp11 ::= LPAREN Exp RPAREN 
            {
              Object RESULT =null;
		
	System.out.println("Exp11");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp11");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp11",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp10 ::= Exp10 MINUSMINUS 
            {
              Object RESULT =null;
		
	System.out.println("Exp10");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp10");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp10 ::= Exp10 PLUSPLUS 
            {
              Object RESULT =null;
		
	System.out.println("Exp10");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp10");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp10 ::= Exp10 LPAREN _Exp2_ RPAREN 
            {
              Object RESULT =null;
		int e10left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("Exp10");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp10");
	nodo.setNodeType(NodeType.FUNCTION_CALL);
	String id = ((NodeAnalyzer)e10).getStrAtr(NodeKeys.VAR_ID);
	if(id != null)
		nodo.setAtribute(NodeKeys.FUNC_ID, id.toString());
	else{
		//TODO error
		System.out.println("error");
	}
	nodo.copyHijos(((NodeAnalyzer)e2).getHijos());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp10 ::= Exp10 LPAREN RPAREN 
            {
              Object RESULT =null;
		int e10left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		
	System.out.println("Exp10");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp10");
	nodo.setNodeType(NodeType.FUNCTION_CALL);
	String id = ((NodeAnalyzer)e10).getStrAtr(NodeKeys.VAR_ID);
	if(id != null)
		nodo.setAtribute(NodeKeys.FUNC_ID, id.toString());
	else{
		//TODO error
		System.out.println("error");
	}
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp10 ::= Exp10 LBRACK Exp RBRACK 
            {
              Object RESULT =null;
		
	System.out.println("Exp10");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp10");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp10 ::= Exp11 
            {
              Object RESULT =null;
		int e11left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e11right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e11 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp10");
	RESULT = e11;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp10",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp9 ::= NOT Exp12 
            {
              Object RESULT =null;
		
	System.out.println("Exp9");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp9");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp9",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp9 ::= MINUSMINUS Exp9 
            {
              Object RESULT =null;
		
	System.out.println("Exp9");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp9");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp9",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp9 ::= PLUSPLUS Exp9 
            {
              Object RESULT =null;
		
	System.out.println("Exp9");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp9");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp9",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp9 ::= Exp10 
            {
              Object RESULT =null;
		int e10left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp9");
	RESULT = e10;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp9",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp12 ::= LPAREN TypeSpecifier RPAREN Exp12 
            {
              Object RESULT =null;
		
	System.out.println("Exp12");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp12");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp12",25, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp12 ::= Exp9 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp12");
	RESULT = e9;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp12",25, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp8 ::= Exp8 DIV Exp12 
            {
              Object RESULT =null;
		
	System.out.println("Exp8");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp8");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp8",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp8 ::= Exp8 MULT Exp12 
            {
              Object RESULT =null;
		
	System.out.println("Exp8");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp8");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp8",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp8 ::= Exp12 
            {
              Object RESULT =null;
		int e12left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e12 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp8");
	RESULT = e12;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp8",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp7 ::= Exp7 MINUS Exp8 
            {
              Object RESULT =null;
		
	System.out.println("Exp7");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp7");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp7",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp7 ::= Exp7 PLUS Exp8 
            {
              Object RESULT =null;
		
	System.out.println("Exp7");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp7");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp7",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp7 ::= Exp8 
            {
              Object RESULT =null;
		int e8left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp7");
	RESULT = e8;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp7",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp6 ::= Exp6 GTEQ Exp7 
            {
              Object RESULT =null;
		
	System.out.println("Exp6");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp6");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp6",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp6 ::= Exp6 LTEQ Exp7 
            {
              Object RESULT =null;
		
	System.out.println("Exp6");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp6");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp6",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp6 ::= Exp6 GT Exp7 
            {
              Object RESULT =null;
		
	System.out.println("Exp6");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp6");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp6",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp6 ::= Exp6 LT Exp7 
            {
              Object RESULT =null;
		
	System.out.println("Exp6");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp6");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp6",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp6 ::= Exp7 
            {
              Object RESULT =null;
		int e7left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp6");
	RESULT = e7;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp6",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp5 ::= Exp5 NOTEQ Exp6 
            {
              Object RESULT =null;
		
	System.out.println("Exp5");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp5");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp5",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp5 ::= Exp5 EQEQ Exp6 
            {
              Object RESULT =null;
		
	System.out.println("Exp5");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp5");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp5",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp5 ::= Exp6 
            {
              Object RESULT =null;
		int e6left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp5");
	RESULT = e6;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp5",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp4 ::= Exp4 ANDAND Exp5 
            {
              Object RESULT =null;
		
	System.out.println("Exp4");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp4");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp4",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp4 ::= Exp5 
            {
              Object RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp4");
	RESULT = e5;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp4",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp3 ::= Exp3 OROR Exp4 
            {
              Object RESULT =null;
		
	System.out.println("Exp3");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp3");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp3",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp3 ::= Exp4 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp3");
	RESULT = e4;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp3",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp2 ::= Exp9 AssignmentOp Exp2 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp2");
 	NodeAnalyzer nodo =new NodeAnalyzer("Exp2");
	nodo.addLeftHijo((NodeAnalyzer)e2);
	NodeAnalyzer reciver = (NodeAnalyzer)e9;
	nodo.setNodeType(NodeType.ASIGNATION);
	reciver.setCad("reciver("+reciver.getCad()+")");
	nodo.addLeftHijo(reciver);
	nodo.setAtribute(NodeKeys.ASIGNMENT, ((NodeAnalyzer)ao).getStrAtr(NodeKeys.ASIGNMENT));
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp2",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp2 ::= Exp3 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp2");
	RESULT = e3;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp2",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp ::= Exp COMMA Exp2 
            {
              Object RESULT =null;
		
	System.out.println("Exp");
	NodeAnalyzer nodo =new NodeAnalyzer("Exp");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp ::= Exp2 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Exp");
	RESULT = e2;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Exp",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // _Stm_ ::= error _Stm_ 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	parser.addError("Error sintactico.", -1);
	System.out.println("error _Stm_");
	NodeAnalyzer nodo =new NodeAnalyzer("_Stm_");
	nodo.setError(true);
	((NodeAnalyzer)ls).addLeftHijo(nodo);
	RESULT = ls;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Stm_",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _Stm_ ::= Stm _Stm_ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_Stm_");
 	((NodeAnalyzer)ls).addLeftHijo((NodeAnalyzer)s);
	RESULT = ls;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Stm_",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // _Stm_ ::= Stm 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_Stm_");
	NodeAnalyzer nodo =new NodeAnalyzer("_Stm_");
	nodo.addLeftHijo((NodeAnalyzer)s);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Stm_",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // GetsStm ::= GETS LPAREN ID RPAREN 
            {
              Object RESULT =null;
		
	System.out.println("GetsStm");
	NodeAnalyzer nodo =new NodeAnalyzer("GetsStm");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("GetsStm",29, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PrintfStm ::= PRINTF LPAREN STRING COMMA ID RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("PrintfStm");
	NodeAnalyzer nodo =new NodeAnalyzer("PrintfStm");
	nodo.setNodeType(NodeType.PRINTFID);
	nodo.setAtribute(NodeKeys.VAR_ID, (String)id);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PrintfStm",35, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PrintfStm ::= PRINTF LPAREN STRING COMMA STRING RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("PrintfStm");
	NodeAnalyzer nodo =new NodeAnalyzer("PrintfStm");
	nodo.setNodeType(NodeType.PRINTFSTRING);
	nodo.setAtribute(NodeKeys.STRING, s);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("PrintfStm",35, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // JumpStm ::= RETURN Exp SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("JumpStm");
	NodeAnalyzer nodo =new NodeAnalyzer("JumpStm");
	nodo.setNodeType(NodeType.RETURN);
	nodo.addLeftHijo((NodeAnalyzer)e);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("JumpStm",33, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IterStm ::= WHILE LPAREN Exp RPAREN Stm 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("IterStm");
	NodeAnalyzer nodo =new NodeAnalyzer("IterStm");
	nodo.addLeftHijo((NodeAnalyzer)e);
	nodo.addLeftHijo((NodeAnalyzer)s);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("IterStm",32, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SelectionStm ::= IF LPAREN Exp RPAREN Stm ELSE Stm 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("SelectionStm");
	NodeAnalyzer nodo =new NodeAnalyzer("SelectionStm");
	nodo.addLeftHijo((NodeAnalyzer)e);
	nodo.addLeftHijo((NodeAnalyzer)s);
	nodo.addLeftHijo((NodeAnalyzer)se);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SelectionStm",37, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SelectionStm ::= IF LPAREN Exp RPAREN Stm 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("SelectionStm");
	NodeAnalyzer nodo =new NodeAnalyzer("SelectionStm");
	nodo.addLeftHijo((NodeAnalyzer)e);
	nodo.addLeftHijo((NodeAnalyzer)s);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SelectionStm",37, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpressionStm ::= GetsStm SEMICOLON 
            {
              Object RESULT =null;
		int gsleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int gsright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object gs = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("ExpressionStm");
	RESULT = gs;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExpressionStm",26, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExpressionStm ::= PrintfStm SEMICOLON 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("ExpressionStm");
	RESULT = pf;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExpressionStm",26, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpressionStm ::= Exp SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("ExpressionStm");
	NodeAnalyzer nodo =new NodeAnalyzer("ExpressionStm");
	nodo.addLeftHijo((NodeAnalyzer)e);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExpressionStm",26, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpressionStm ::= SEMICOLON 
            {
              Object RESULT =null;
		
	System.out.println("ExpressionStm");
	NodeAnalyzer nodo =new NodeAnalyzer("ExpressionStm");
	parser.addWarning("Expresion vacia.");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExpressionStm",26, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CompoundStm ::= LBRACE _Dec_ _Stm_ RBRACE 
            {
              Object RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object ld = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("CompoundStm");
	NodeAnalyzer nodo =new NodeAnalyzer("CompoundStm");
	nodo.copyHijos(((NodeAnalyzer)ld).getHijos());
	nodo.copyHijos(((NodeAnalyzer)ls).getHijos());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("CompoundStm",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CompoundStm ::= LBRACE _Dec_ RBRACE 
            {
              Object RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object ld = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("CompoundStm");
	NodeAnalyzer nodo =new NodeAnalyzer("CompoundStm");
	nodo.copyHijos(((NodeAnalyzer)ld).getHijos());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("CompoundStm",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CompoundStm ::= LBRACE _Stm_ RBRACE 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("CompoundStm");
	NodeAnalyzer nodo =new NodeAnalyzer("CompoundStm");
	nodo.copyHijos(((NodeAnalyzer)ls).getHijos());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("CompoundStm",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CompoundStm ::= LBRACE RBRACE 
            {
              Object RESULT =null;
		
	System.out.println("CompoundStm");
	NodeAnalyzer nodo =new NodeAnalyzer("CompoundStm");
	parser.addWarning("Cuerpo de sentencias vacio.");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("CompoundStm",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stm ::= JumpStm 
            {
              Object RESULT =null;
		int jsleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int jsright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object js = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Stm");
	RESULT = js;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Stm",38, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stm ::= IterStm 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Stm");
	RESULT = is;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Stm",38, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stm ::= SelectionStm 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Stm");
	RESULT = ss;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Stm",38, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stm ::= ExpressionStm 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Stm");
	RESULT = es;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Stm",38, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stm ::= CompoundStm 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Stm");
	RESULT = cs;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Stm",38, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // _Initializer_ ::= _Initializer_ COMMA Initializer 
            {
              Object RESULT =null;
		
	System.out.println("_Initializer_");
	NodeAnalyzer nodo =new NodeAnalyzer("_Initializer_");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Initializer_",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // _Initializer_ ::= Initializer 
            {
              Object RESULT =null;
		
	System.out.println("_Initializer_");
	NodeAnalyzer nodo =new NodeAnalyzer("_Initializer_");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Initializer_",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Initializer ::= LBRACE _Initializer_ COMMA RBRACE 
            {
              Object RESULT =null;
		
	System.out.println("Initializer");
	NodeAnalyzer nodo =new NodeAnalyzer("Initializer");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Initializer",31, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Initializer ::= LBRACE _Initializer_ RBRACE 
            {
              Object RESULT =null;
		
	System.out.println("Initializer");
	NodeAnalyzer nodo =new NodeAnalyzer("Initializer");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Initializer",31, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Initializer ::= Exp2 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Initializer");
 	NodeAnalyzer nae2 = (NodeAnalyzer)e2; 
 	nae2.setNodeType(NodeType.ASIGNATION);
 	nae2.setAtribute(NodeKeys.ASIGNMENT, "=");
	RESULT = nae2;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Initializer",31, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // _Ident_ ::= ID COMMA _Ident_ 
            {
              Object RESULT =null;
		
	System.out.println("_Ident_");
	NodeAnalyzer nodo =new NodeAnalyzer("_Ident_");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Ident_",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // _Ident_ ::= ID 
            {
              Object RESULT =null;
		
	System.out.println("_Ident_");
	NodeAnalyzer nodo =new NodeAnalyzer("_Ident_");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Ident_",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParameterDeclaration ::= TypeSpecifier DirectDeclarator 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("ParameterDeclaration");
	NodeAnalyzer nodo =new NodeAnalyzer("ParameterDeclaration");
	NodeAnalyzer nadd = (NodeAnalyzer)dd;
	nodo.setAtribute(NodeKeys.TYPE, ((NodeAnalyzer)ts).getStrAtr(NodeKeys.TYPE));
 	switch (nadd.getNodeType()) {
	case VAR:
		nodo.setAtribute(NodeKeys.VAR_ID, nadd.getStrAtr(NodeKeys.VAR_ID));
		nodo.setAtribute(NodeKeys.IS_PARAM, "true");
		nodo.setNodeType(NodeType.VARDEC);
		break;
	case ARRAYVAR:
		nodo.setAtribute(NodeKeys.VAR_ID, nadd.getStrAtr(NodeKeys.VAR_ID));
		nodo.setAtribute(NodeKeys.IS_PARAM, "true");
		nodo.setNodeType(NodeType.ARRAYVARDEC);
		break;

	default:
		parser.addError("Incorrecta declaracion de parametro.", -1);
		nodo.setError(true);
		break;
	}
 	
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",34, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // _ParameterDeclaration_ ::= _ParameterDeclaration_ COMMA ParameterDeclaration 
            {
              Object RESULT =null;
		int lpdleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int lpdright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object lpd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_ParameterDeclaration_");
	((NodeAnalyzer)lpd).addRightHijo((NodeAnalyzer)pd);
	((NodeAnalyzer)pd).setAtribute(NodeKeys.PARAM_POS, ""+parser.auxCountParamDec++);
	RESULT = lpd;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_ParameterDeclaration_",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // _ParameterDeclaration_ ::= ParameterDeclaration 
            {
              Object RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_ParameterDeclaration_");
	NodeAnalyzer nodo =new NodeAnalyzer("_ParameterDeclaration_");
	nodo.addRightHijo((NodeAnalyzer)pd);
	((NodeAnalyzer)pd).setAtribute(NodeKeys.PARAM_POS, ""+parser.auxCountParamDec++);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_ParameterDeclaration_",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DirectDeclarator ::= DirectDeclarator LPAREN RPAREN 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		
	System.out.println("DirectDeclarator");
 	NodeAnalyzer nadd = (NodeAnalyzer)dd;
	switch (nadd.getNodeType()) {
	case VAR:
		nadd.setNodeType(NodeType.FUNCTION);
		break;
	default:
		parser.addError("Incorrecta declaracion de funcion.", -1);
		nadd.setError(true);
		break;
	}
	
	RESULT = nadd;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DirectDeclarator ::= DirectDeclarator LPAREN _Ident_ RPAREN 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		
	System.out.println("DirectDeclarator");
 	NodeAnalyzer nadd = (NodeAnalyzer)dd;
	switch (nadd.getNodeType()) {
	case VAR:
		nadd.setNodeType(NodeType.FUNCTION_CALL);
		break;
	default:
		parser.addError("Incorrecta llamada de funcion.", -1);
		nadd.setError(true);
		break;
	}
	
	RESULT = nadd;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DirectDeclarator ::= DirectDeclarator LPAREN _ParameterDeclaration_ RPAREN 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int lpdleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int lpdright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object lpd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("DirectDeclarator");
 	NodeAnalyzer nadd = (NodeAnalyzer)dd;
 	switch (nadd.getNodeType()) {
	case VAR:
		nadd.setNodeType(NodeType.FUNCTION_DEC);
		nadd.copyHijos(((NodeAnalyzer)lpd).getHijos());
		break;
	default:
		parser.addError("Incorrecta llamada de funcion.", -1);
		nadd.setError(true);
		break;
	}
 	parser.auxCountParamDec = 0;
 	RESULT = nadd;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DirectDeclarator ::= DirectDeclarator LBRACK ConstantExpression RBRACK 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("DirectDeclarator");
 	NodeAnalyzer nadd = (NodeAnalyzer)dd;
 	switch (nadd.getNodeType()) {
	case VAR:
		nadd.setNodeType(NodeType.ARRAYVAR);
		nadd.setAtribute(NodeKeys.ARRAY_DIM, "1");
		nadd.addLeftHijo((NodeAnalyzer)ce);
		break;
	case ARRAYVAR:
		Integer i = nadd.getIntAtr(NodeKeys.ARRAY_DIM);
		nadd.setAtribute(NodeKeys.ARRAY_DIM, ""+(i.intValue()+1));
		nadd.addLeftHijo((NodeAnalyzer)ce);
		break;

	default:
		parser.addError("Incorrecta declaracion de array.", -1);
		nadd.setError(true);
		break;
	}
 	
	RESULT = nadd;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DirectDeclarator ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("DirectDeclarator");
	NodeAnalyzer nodo =new NodeAnalyzer("DirectDeclarator");
	//nodo.setStates(parser.getState().getDecStates().name());
	nodo.setNodeType(NodeType.VAR);
	nodo.setAtribute(NodeKeys.VAR_ID, id.toString());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("DirectDeclarator",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypeSpecifier ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("TypeSpecifier");
	NodeAnalyzer nodo =new NodeAnalyzer("TypeSpecifier");
	nodo.setAtribute(NodeKeys.TYPE, "float");
	nodo.setAtribute(NodeKeys.CONST_FLOAT_VALUE, ""+f.floatValue());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",39, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeSpecifier ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("TypeSpecifier");
	NodeAnalyzer nodo =new NodeAnalyzer("TypeSpecifier");
	nodo.setAtribute(NodeKeys.TYPE, "int");
	nodo.setAtribute(NodeKeys.CONST_INT_VALUE, ""+i.intValue());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",39, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeSpecifier ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("TypeSpecifier");
	NodeAnalyzer nodo =new NodeAnalyzer("TypeSpecifier");
	nodo.setAtribute(NodeKeys.TYPE, "char");
	nodo.setAtribute(NodeKeys.CONST_CHAR_VALUE, ""+c.charValue());
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",39, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeSpecifier ::= VOID 
            {
              Object RESULT =null;
		
	System.out.println("TypeSpecifier");
	NodeAnalyzer nodo =new NodeAnalyzer("TypeSpecifier");
	nodo.setAtribute(NodeKeys.TYPE, "void");
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",39, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // InitDeclarator ::= DirectDeclarator EQ Initializer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("InitDeclarator");
	
 	NodeAnalyzer nadd = (NodeAnalyzer)dd;
 	NodeAnalyzer nai = (NodeAnalyzer)i;
 	
 	String cad = nai.getStrAtr(NodeKeys.CONST_INT_VALUE);
	if(cad != null)
		nadd.setAtribute(NodeKeys.CONST_INT_VALUE, cad);
	else{
		cad = nai.getStrAtr(NodeKeys.CONST_CHAR_VALUE);
		if(cad != null)
			nadd.setAtribute(NodeKeys.CONST_CHAR_VALUE, cad);
		else{
			cad = nai.getStrAtr(NodeKeys.CONST_FLOAT_VALUE);
			if(cad != null)
				nadd.setAtribute(NodeKeys.CONST_FLOAT_VALUE, cad);
			else
				nadd.addLeftHijo(nai);
		}
	}
	RESULT = dd;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("InitDeclarator",30, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // InitDeclarator ::= DirectDeclarator 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("InitDeclarator");
	//NodeAnalyzer nodo =new NodeAnalyzer("InitDeclarator");
	RESULT = dd;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("InitDeclarator",30, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // _InitDeclarator_ ::= InitDeclarator COMMA _InitDeclarator_ 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object lid = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_InitDeclarator_");
	((NodeAnalyzer)lid).addLeftHijo((NodeAnalyzer)id);
	RESULT = lid;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_InitDeclarator_",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // _InitDeclarator_ ::= InitDeclarator 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_InitDeclarator_");
	NodeAnalyzer nodo =new NodeAnalyzer("_InitDeclarator_");
	nodo.addLeftHijo((NodeAnalyzer)id);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_InitDeclarator_",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // _Dec_ ::= Dec _Dec_ 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object ld = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_Dec_");
	((NodeAnalyzer)ld).addLeftHijo((NodeAnalyzer)d);
	RESULT = ld;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Dec_",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // _Dec_ ::= Dec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_Dec_");
	NodeAnalyzer nodo =new NodeAnalyzer("_Dec_");
	nodo.addLeftHijo((NodeAnalyzer)d);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_Dec_",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= TypeSpecifier _InitDeclarator_ SEMICOLON 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object lid = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		
	System.out.println("Dec");
 	
 	NodeAnalyzer nats = (NodeAnalyzer)ts;
 	String type = nats.getStrAtr(NodeKeys.TYPE);
 	NodeAnalyzer nodo = null;
 	NodeAnalyzer aux = null;
 	LinkedList<NodeAnalyzer> hijos = ((NodeAnalyzer)lid).getHijos();
 	
 	for (NodeAnalyzer nah : hijos) {
		aux =new NodeAnalyzer("Dec");
		aux.setAtribute(NodeKeys.TYPE, type);
		aux.setAtribute(NodeKeys.VAR_ID, nah.getStrAtr(NodeKeys.VAR_ID));
		//TODO falta comprobar el tipo de la asignacion
		String cad = nah.getStrAtr(NodeKeys.CONST_INT_VALUE);
		if(cad != null)
			aux.setAtribute(NodeKeys.CONST_INT_VALUE, cad);
		
		cad = nah.getStrAtr(NodeKeys.CONST_CHAR_VALUE);
		if(cad != null)
			aux.setAtribute(NodeKeys.CONST_CHAR_VALUE, cad);
		
		cad = nah.getStrAtr(NodeKeys.CONST_FLOAT_VALUE);
		if(cad != null)
			aux.setAtribute(NodeKeys.CONST_FLOAT_VALUE, cad);
		
		aux.copyHijos(nah.getHijos());
		aux.setNodeType(NodeType.VARDEC);
		
		if(nodo == null){
			nodo = aux;
		}else{
			nodo.addRightHermano(aux);
		}
	}
 	
 	if(type.equals("void")){
 		parser.addError("Variable declarad con tipo Void.", -1);
 		nodo.setError(true);
 	}
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Dec",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FunctionDef ::= TypeSpecifier DirectDeclarator CompoundStm 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("FunctionDef");
	NodeAnalyzer nodo =new NodeAnalyzer("FunctionDef");
	nodo.addLeftHijo((NodeAnalyzer)cs);
	//nodo.addLeftHijo((NodeAnalyzer)dd);
	nodo.copyLeftHijos(((NodeAnalyzer)dd).getHijos());
	String id = ((NodeAnalyzer)dd).getStrAtr(NodeKeys.VAR_ID);
	String type = ((NodeAnalyzer)ts).getStrAtr(NodeKeys.TYPE);
	if(!("void".compareTo(type)==0)){
		NodeAnalyzer ret = nodo.getLastChildren().getLastChildren();
		ret.setAtribute(NodeKeys.TYPE, type);
	}
	nodo.setAtribute(NodeKeys.TYPE, type);
	nodo.setAtribute(NodeKeys.FUNC_ID, id);
	nodo.setNodeType(NodeType.FUNCTION_DEC);
	VarTable.getInstance().addFunction(id, type);
	RESULT = nodo;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("FunctionDef",28, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ExternalDeclaration ::= Dec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
 	NodeAnalyzer nad = ((NodeAnalyzer)d);
	System.out.println("ExternalDeclaration");
	StateAnalyzer sa = parser.getState();
	if(!sa.isDecStates(StateAnalyzer.DeclarationStates.GLOBAL)){
		parser.addError("Declaracion de variable global entre funciones.", -1);
		nad.setError(true);
	}
	//nad.setStates(sa.getDecStates().name());
	RESULT = nad;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExternalDeclaration",27, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ExternalDeclaration ::= FunctionDef 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("ExternalDeclaration");
	StateAnalyzer sa = parser.getState();
	if(sa.isDecStates(StateAnalyzer.DeclarationStates.GLOBAL))
		sa.changeDecStates();
	//((NodeAnalyzer)fd).setStates(sa.getDecStates().name());
	RESULT = fd;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ExternalDeclaration",27, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // _ExternalDeclaration_ ::= error _ExternalDeclaration_ 
            {
              Object RESULT =null;
		int ledleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int ledright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object led = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	parser.addError("Error sintactico.", -1);
	System.out.println("error _ExternalDeclaration_");
	NodeAnalyzer nodo =new NodeAnalyzer("_ExternalDeclaration_");
	nodo.setError(true);
	((NodeAnalyzer)led).addLeftHijo(nodo);
	RESULT = led;
 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_ExternalDeclaration_",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // _ExternalDeclaration_ ::= ExternalDeclaration _ExternalDeclaration_ 
            {
              Object RESULT =null;
		int edleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int edright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object ed = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int ledleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int ledright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object led = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_ExternalDeclaration_");
	((NodeAnalyzer)led).copyLeftHijos(((NodeAnalyzer)ed).extractHermanos());
	((NodeAnalyzer)led).addLeftHijo((NodeAnalyzer)ed);
	RESULT = led; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_ExternalDeclaration_",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // _ExternalDeclaration_ ::= ExternalDeclaration 
            {
              Object RESULT =null;
		int edleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object ed = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("_ExternalDeclaration_");
	NodeAnalyzer nodo =new NodeAnalyzer("_ExternalDeclaration_");
	nodo.copyLeftHijos(((NodeAnalyzer)ed).extractHermanos());
	nodo.addLeftHijo((NodeAnalyzer)ed);
	RESULT = nodo; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("_ExternalDeclaration_",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= _ExternalDeclaration_ 
            {
              Object RESULT =null;
		int ledleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int ledright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object led = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		
	System.out.println("Program");
	NodeAnalyzer nodo =new NodeAnalyzer("Program");
	nodo.copyHijos(((NodeAnalyzer)led).getHijos());
	parser.setMain(nodo);
	RESULT = nodo; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Program",36, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

